[{"path":"https://errickson.net/rlemon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arav Agarwal. Author. Aditya Tewari. Author. Josh Errickson. Maintainer, author.","code":""},{"path":"https://errickson.net/rlemon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Agarwal , Tewari , Errickson J (2022). rlemon: R Access LEMON Graph Algorithms. R package version 0.1.0, https://github.com/josherrickson/rlemon.","code":"@Manual{,   title = {rlemon: R Access to LEMON Graph Algorithms},   author = {Arav Agarwal and Aditya Tewari and Josh Errickson},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/josherrickson/rlemon}, }"},{"path":"https://errickson.net/rlemon/index.html","id":"rlemon-r-interface-to-lemon-solver","dir":"","previous_headings":"","what":"R Access to LEMON Graph Algorithms","title":"R Access to LEMON Graph Algorithms","text":"Package website: release | development rlemon provides convenient access LEMON C++ graph library. Built recent version LEMON (1.3.1), provides R interface algorithms solve following problems:","code":""},{"path":"https://errickson.net/rlemon/index.html","id":"1-indexing-vs-0-indexing","dir":"","previous_headings":"","what":"1-indexing vs 0-indexing","title":"R Access to LEMON Graph Algorithms","text":"LEMON C++ library uses 0-indexing, common C++, meaning graph 5 nodes labeled 0 4. R almost exclusively uses 1-indexing, meaning graph 5 nodes labeled 1 5. consistency R, function R expect 1-indexing, convert 0-indexing passing C++.","code":""},{"path":"https://errickson.net/rlemon/reference/AllPairsMinCut.html","id":null,"dir":"Reference","previous_headings":"","what":"AllPairsMinCut — AllPairsMinCut","title":"AllPairsMinCut — AllPairsMinCut","text":"Finds -pairs minimum cut tree, using Gomory-Hu algorithm.","code":""},{"path":"https://errickson.net/rlemon/reference/AllPairsMinCut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AllPairsMinCut — AllPairsMinCut","text":"","code":"AllPairsMinCut(arcSources, arcTargets, arcWeights, numNodes, algorithm)"},{"path":"https://errickson.net/rlemon/reference/AllPairsMinCut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AllPairsMinCut — AllPairsMinCut","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's arcs numNodes number nodes graph algorithm algorithm run. Choices include \"GomoryHu\"  GomoryHu default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00182.html> information.","code":""},{"path":"https://errickson.net/rlemon/reference/AllPairsMinCut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AllPairsMinCut — AllPairsMinCut","text":"list containing three entries: 1) list predecessor nodes   node graph, 2) list weights predecessor edge   node, 3) list distances root node node.","code":""},{"path":"https://errickson.net/rlemon/reference/Approximation-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximation Algorithms — Approximation-Algorithms","title":"Approximation Algorithms — Approximation-Algorithms","text":"`GrossoLocatelliPullanMcRunner` runs Grosso, Locatelli, Pullan solving maximum clique problem","code":""},{"path":"https://errickson.net/rlemon/reference/Approximation-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximation Algorithms — Approximation-Algorithms","text":"","code":"GrossoLocatelliPullanMcRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Approximation-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximation Algorithms — Approximation-Algorithms","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Approximation-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximation Algorithms — Approximation-Algorithms","text":"List 1) clique size, 2) members clique","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-1.html","id":null,"dir":"Reference","previous_headings":"","what":"Connectivity Algorithms - Boolean Return — Connectivity-Algorithms-1","title":"Connectivity Algorithms - Boolean Return — Connectivity-Algorithms-1","text":"`IsConnected` returns graph connected `IsAcyclic` returns graph acyclic `IsTree` returns graph tree `IsBipartite` returns graph bipartite `IsStronglyConnected` returns graph strongly connected `IsDAG` returns graph DAG `IsBiNodeConnected` returns graph bi-node connected `IsBiEdgeConnected` returns graph bi-edge connected `IsLoopFree` returns graph loop-free `IsParallelFree` returns graph parallel-free `IsSimpleGraph` returns graph simple `IsEulerian` returns graph Eulerian ","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connectivity Algorithms - Boolean Return — Connectivity-Algorithms-1","text":"","code":"IsConnectedRunner(arcSources, arcTargets, numNodes)  IsAcyclicRunner(arcSources, arcTargets, numNodes)  IsTreeRunner(arcSources, arcTargets, numNodes)  IsBipartiteRunner(arcSources, arcTargets, numNodes)  IsStronglyConnectedRunner(arcSources, arcTargets, numNodes)  IsDAGRunner(arcSources, arcTargets, numNodes)  IsBiNodeConnectedRunner(arcSources, arcTargets, numNodes)  IsBiEdgeConnectedRunner(arcSources, arcTargets, numNodes)  IsLoopFreeRunner(arcSources, arcTargets, numNodes)  IsParallelFreeRunner(arcSources, arcTargets, numNodes)  IsSimpleGraphRunner(arcSources, arcTargets, numNodes)  IsEulerianRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connectivity Algorithms - Boolean Return — Connectivity-Algorithms-1","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connectivity Algorithms - Boolean Return — Connectivity-Algorithms-1","text":"boolean, stating graph property","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connectivity Algorithms - Boolean Return — Connectivity-Algorithms-1","text":"","code":"data(small_graph_example) start <- small_graph_example$startnodes end <- small_graph_example$endnodes numnodes <- length(unique(c(start, end))) IsConnected(start, end, numnodes) #> [1] 1"},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Connectivity Algorithms - Integer Return — Connectivity-Algorithms-2","title":"Connectivity Algorithms - Integer Return — Connectivity-Algorithms-2","text":"`CountBiEdgeConnectedComponents` returns many Bi-Edge Connected Components graph . `CountConnectedComponents` returns many Connected Components graph . `CountBiNodeConnectedComponents` returns many Bi-Node Connected Components graph . `CountStronglyConnectedComponents` returns many Strongly Connected Components graph .","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connectivity Algorithms - Integer Return — Connectivity-Algorithms-2","text":"","code":"CountBiEdgeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  CountConnectedComponentsRunner(arcSources, arcTargets, numNodes)  CountBiNodeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  CountStronglyConnectedComponentsRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connectivity Algorithms - Integer Return — Connectivity-Algorithms-2","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connectivity Algorithms - Integer Return — Connectivity-Algorithms-2","text":"integer, counting property graph","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-3.html","id":null,"dir":"Reference","previous_headings":"","what":"Connectivity Algorithms - List Return — Connectivity-Algorithms-3","title":"Connectivity Algorithms - List Return — Connectivity-Algorithms-3","text":"`FindStronglyConnectedComponents` returns vector containing component number node `FindStronglyConnectedCutArcs` returns R List containing 1) list cut arc sources, 2) list cut arc destinations `FindBiEdgeConnectedCutEdges` returns R List containing 1) list cut edge sources, 2) list cut edge destinations `FindBiNodeConnectedCutComponents` returns vector containing component number cut arc. `FindBiNodeConnectedCutNodes` returns vector containing cut nodes `FindConnectedComponents` returns vector containing component number node `FindBiEdgeConnectedComponents` returns vector containing component number node","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connectivity Algorithms - List Return — Connectivity-Algorithms-3","text":"","code":"getBipartitePartitionsRunner(arcSources, arcTargets, numNodes)  getAndCheckTopologicalSortRunner(arcSources, arcTargets, numNodes)  getTopologicalSortRunner(arcSources, arcTargets, numNodes)  FindStronglyConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindStronglyConnectedCutArcsRunner(arcSources, arcTargets, numNodes)  FindBiEdgeConnectedCutEdgesRunner(arcSources, arcTargets, numNodes)  FindBiNodeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindBiNodeConnectedCutNodesRunner(arcSources, arcTargets, numNodes)  FindConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindBiEdgeConnectedComponentsRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connectivity Algorithms - List Return — Connectivity-Algorithms-3","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Connectivity-Algorithms-3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connectivity Algorithms - List Return — Connectivity-Algorithms-3","text":"List, returning set nodes edges graph `getBipartitePartitionsRunner` returns R List containing (1) boolean stating graph bipartite, (2) std::vector length numNodes, containing partition node `getAndCheckTopologicalSortRunner` returns R List containing (1) boolean stating graph dag, (2) vector length numNodes, containing index vertex ordering location `getTopologicalSortRunner` returns vector length numNodes, containing index vertex ordering location .","code":""},{"path":"https://errickson.net/rlemon/reference/CountBiEdgeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"CountBiEdgeConnectedComponents — CountBiEdgeConnectedComponents","title":"CountBiEdgeConnectedComponents — CountBiEdgeConnectedComponents","text":"Counts number bi-edge connected components undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaf7c5744b2175210b8ea67897aaa27885' information.","code":""},{"path":"https://errickson.net/rlemon/reference/CountBiEdgeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CountBiEdgeConnectedComponents — CountBiEdgeConnectedComponents","text":"","code":"CountBiEdgeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/CountBiEdgeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CountBiEdgeConnectedComponents — CountBiEdgeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/CountBiEdgeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CountBiEdgeConnectedComponents — CountBiEdgeConnectedComponents","text":"integer defining number bi-node connected components","code":""},{"path":"https://errickson.net/rlemon/reference/CountBiNodeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"CountBiNodeConnectedComponents — CountBiNodeConnectedComponents","title":"CountBiNodeConnectedComponents — CountBiNodeConnectedComponents","text":"Counts number bi-node connected components undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaf7c5744b2175210b8ea67897aaa27885' information.","code":""},{"path":"https://errickson.net/rlemon/reference/CountBiNodeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CountBiNodeConnectedComponents — CountBiNodeConnectedComponents","text":"","code":"CountBiNodeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/CountBiNodeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CountBiNodeConnectedComponents — CountBiNodeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/CountBiNodeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CountBiNodeConnectedComponents — CountBiNodeConnectedComponents","text":"integer defining number bi-node connected components","code":""},{"path":"https://errickson.net/rlemon/reference/CountConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"CountConnectedComponents — CountConnectedComponents","title":"CountConnectedComponents — CountConnectedComponents","text":"Counts number connected components undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga33a9d9d4803cb15e83568b2526e978a5' information.","code":""},{"path":"https://errickson.net/rlemon/reference/CountConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CountConnectedComponents — CountConnectedComponents","text":"","code":"CountConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/CountConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CountConnectedComponents — CountConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/CountConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CountConnectedComponents — CountConnectedComponents","text":"integer defining number connected components","code":""},{"path":"https://errickson.net/rlemon/reference/CountStronglyConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"CountStronglyConnectedComponents — CountStronglyConnectedComponents","title":"CountStronglyConnectedComponents — CountStronglyConnectedComponents","text":"Counts number strongly connected components directed graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad30bc47dfffb78234eeee903cb3766f4' information.","code":""},{"path":"https://errickson.net/rlemon/reference/CountStronglyConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CountStronglyConnectedComponents — CountStronglyConnectedComponents","text":"","code":"CountStronglyConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/CountStronglyConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CountStronglyConnectedComponents — CountStronglyConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/CountStronglyConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CountStronglyConnectedComponents — CountStronglyConnectedComponents","text":"integer defining number strongly connected components","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"FindBiEdgeConnectedComponents — FindBiEdgeConnectedComponents","title":"FindBiEdgeConnectedComponents — FindBiEdgeConnectedComponents","text":"Finds bi-edge-connected components undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga76c1fdd1881d21677507100b7e96c983' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindBiEdgeConnectedComponents — FindBiEdgeConnectedComponents","text":"","code":"FindBiEdgeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindBiEdgeConnectedComponents — FindBiEdgeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindBiEdgeConnectedComponents — FindBiEdgeConnectedComponents","text":"list containing node id bi-edge-connected component.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedCutEdges.html","id":null,"dir":"Reference","previous_headings":"","what":"FindBiEdgeConnectedCutEdges — FindBiEdgeConnectedCutEdges","title":"FindBiEdgeConnectedCutEdges — FindBiEdgeConnectedCutEdges","text":"Finds bi-edge-connected cut edges undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga58d444eba448c5f1a53539bd1b69636e' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedCutEdges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindBiEdgeConnectedCutEdges — FindBiEdgeConnectedCutEdges","text":"","code":"FindBiEdgeConnectedCutEdges(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedCutEdges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindBiEdgeConnectedCutEdges — FindBiEdgeConnectedCutEdges","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiEdgeConnectedCutEdges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindBiEdgeConnectedCutEdges — FindBiEdgeConnectedCutEdges","text":"list containing 1) list cut arc sources, 2) list cut   arc destinations.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"FindBiNodeConnectedComponents — FindBiNodeConnectedComponents","title":"FindBiNodeConnectedComponents — FindBiNodeConnectedComponents","text":"Finds bi-node-connected components undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga9d70526ab54e10b4b6fe3762af8675dd' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindBiNodeConnectedComponents — FindBiNodeConnectedComponents","text":"","code":"FindBiNodeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindBiNodeConnectedComponents — FindBiNodeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindBiNodeConnectedComponents — FindBiNodeConnectedComponents","text":"list containing arc id cut arc.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedCutNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"FindBiNodeConnectedCutNodes — FindBiNodeConnectedCutNodes","title":"FindBiNodeConnectedCutNodes — FindBiNodeConnectedCutNodes","text":"Finds bi-node-connected cut nodes undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga31461f33a748327ea3ef2a3199ffb6c7' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedCutNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindBiNodeConnectedCutNodes — FindBiNodeConnectedCutNodes","text":"","code":"FindBiNodeConnectedCutNodes(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedCutNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindBiNodeConnectedCutNodes — FindBiNodeConnectedCutNodes","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindBiNodeConnectedCutNodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindBiNodeConnectedCutNodes — FindBiNodeConnectedCutNodes","text":"list containing cut nodes.","code":""},{"path":"https://errickson.net/rlemon/reference/FindConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"FindConnectedComponents — FindConnectedComponents","title":"FindConnectedComponents — FindConnectedComponents","text":"Finds connected components undirected graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaa467a3e0a8c2e9e762650fd01fadff89' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindConnectedComponents — FindConnectedComponents","text":"","code":"FindConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindConnectedComponents — FindConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindConnectedComponents — FindConnectedComponents","text":"list containing node id connected component.","code":""},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"FindStronglyConnectedComponents — FindStronglyConnectedComponents","title":"FindStronglyConnectedComponents — FindStronglyConnectedComponents","text":"Finds strongly connected components directed graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga46f8c22f3e2989c4689faa4c46ec9436' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindStronglyConnectedComponents — FindStronglyConnectedComponents","text":"","code":"FindStronglyConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindStronglyConnectedComponents — FindStronglyConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindStronglyConnectedComponents — FindStronglyConnectedComponents","text":"list containing node id strongly connected component.","code":""},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedCutArcs.html","id":null,"dir":"Reference","previous_headings":"","what":"FindStronglyConnectedCutArcs — FindStronglyConnectedCutArcs","title":"FindStronglyConnectedCutArcs — FindStronglyConnectedCutArcs","text":"Finds cut arcs strongly connected components directed graph. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad7af5c3a97453e37f251f0e86dbb83db' information.","code":""},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedCutArcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FindStronglyConnectedCutArcs — FindStronglyConnectedCutArcs","text":"","code":"FindStronglyConnectedCutArcs(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedCutArcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FindStronglyConnectedCutArcs — FindStronglyConnectedCutArcs","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/FindStronglyConnectedCutArcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FindStronglyConnectedCutArcs — FindStronglyConnectedCutArcs","text":"list containing 1) list cut arc sources, 2) list cut   arc destinations.","code":""},{"path":"https://errickson.net/rlemon/reference/GetAndCheckTopologicalSort.html","id":null,"dir":"Reference","previous_headings":"","what":"GetAndCheckTopologicalSort — GetAndCheckTopologicalSort","title":"GetAndCheckTopologicalSort — GetAndCheckTopologicalSort","text":"Checks directed graph DAG returns topological order. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gafc2cb20cf3859f157c0e12da7f310bb3' information.","code":""},{"path":"https://errickson.net/rlemon/reference/GetAndCheckTopologicalSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetAndCheckTopologicalSort — GetAndCheckTopologicalSort","text":"","code":"GetAndCheckTopologicalSort(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/GetAndCheckTopologicalSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetAndCheckTopologicalSort — GetAndCheckTopologicalSort","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/GetAndCheckTopologicalSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetAndCheckTopologicalSort — GetAndCheckTopologicalSort","text":"list containing 1) boolean stating graph dag, 2)   vector length numNodes, containing index vertex   ordering location ","code":""},{"path":"https://errickson.net/rlemon/reference/GetBipartitePartitions.html","id":null,"dir":"Reference","previous_headings":"","what":"GetBipartitePartitions — GetBipartitePartitions","title":"GetBipartitePartitions — GetBipartitePartitions","text":"Checks undirected graph bipartite finds bipartite partitions. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga58ba1d00c569f0eb0deb42afca9f80bb' information.","code":""},{"path":"https://errickson.net/rlemon/reference/GetBipartitePartitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetBipartitePartitions — GetBipartitePartitions","text":"","code":"GetBipartitePartitions(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/GetBipartitePartitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetBipartitePartitions — GetBipartitePartitions","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/GetBipartitePartitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetBipartitePartitions — GetBipartitePartitions","text":"list containing 1) boolean stating graph bipartite,   2) list length numNodes, containing partition node","code":""},{"path":"https://errickson.net/rlemon/reference/GetTopologicalSort.html","id":null,"dir":"Reference","previous_headings":"","what":"GetTopologicalSort — GetTopologicalSort","title":"GetTopologicalSort — GetTopologicalSort","text":"Gives back topological order DAG. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gafc2cb20cf3859f157c0e12da7f310bb3' information.","code":""},{"path":"https://errickson.net/rlemon/reference/GetTopologicalSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetTopologicalSort — GetTopologicalSort","text":"","code":"GetTopologicalSort(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/GetTopologicalSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetTopologicalSort — GetTopologicalSort","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/GetTopologicalSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetTopologicalSort — GetTopologicalSort","text":"list length numNodes, containing index vertex   ordering location .","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatible Graph Converter — Graph-Converter","title":"Compatible Graph Converter — Graph-Converter","text":"'GraphCompatabilityConverter' returns compatible version graph can used rest rlemon's interfaces. rlemon's interface requires node inputs 0-indexed.","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatible Graph Converter — Graph-Converter","text":"","code":"GraphCompatabilityConverter(nodesList, arcSources, arcTargets)"},{"path":"https://errickson.net/rlemon/reference/Graph-Converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatible Graph Converter — Graph-Converter","text":"nodesList, vector nodes graph arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatible Graph Converter — Graph-Converter","text":"list containing four entries: 1) rlemon compatible nodes, 2) arcSources match converted nodes 3) arcTargets match converted nodes, 4) mapping original converted nodes","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-1.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Search Algorithms — Graph-Search-Algorithms-1","title":"Graph Search Algorithms — Graph-Search-Algorithms-1","text":"`BfsRunner` calculates shortest path using Breath-First-Search `DfsRunner` calculates shortest path using Depth-First-Search","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph Search Algorithms — Graph-Search-Algorithms-1","text":"","code":"BfsRunner(arcSources, arcTargets, numNodes, startNode = -1L, endNode = -1L)  DfsRunner(arcSources, arcTargets, numNodes, startNode = -1L, endNode = -1L)"},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph Search Algorithms — Graph-Search-Algorithms-1","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph startNode, start node path endNode, end node path","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph Search Algorithms — Graph-Search-Algorithms-1","text":"list containing three entries: 1) predecessor vertex shortest path, 2) distances node startNode , 3) list containing node reached ","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Search Algorithms — Graph-Search-Algorithms-2","title":"Graph Search Algorithms — Graph-Search-Algorithms-2","text":"`MaxCardinalitySearchRunner` runs Maximum Cardinality Search Algorithm","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph Search Algorithms — Graph-Search-Algorithms-2","text":"","code":"MaxCardinalitySearchRunner(   arcSources,   arcTargets,   arcCapacities,   numNodes,   startNode = -1L )"},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph Search Algorithms — Graph-Search-Algorithms-2","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges arcCapacities, vector corresponding distances graph's edges numNodes, number nodes graph startNode, start node path","code":""},{"path":"https://errickson.net/rlemon/reference/Graph-Search-Algorithms-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph Search Algorithms — Graph-Search-Algorithms-2","text":"list containing two entries: 1) cardinality node , 2) list containing node reached ","code":""},{"path":"https://errickson.net/rlemon/reference/GraphSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"GraphSearch — GraphSearch","title":"GraphSearch — GraphSearch","text":"Runs common graph search algorithm find minimum cardinality shortest path. Finds shortest path /vertices start/end node given.","code":""},{"path":"https://errickson.net/rlemon/reference/GraphSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphSearch — GraphSearch","text":"","code":"GraphSearch(   arcSources,   arcTargets,   numNodes,   startNode = -1,   endNode = -1,   algorithm = \"Bfs\" )"},{"path":"https://errickson.net/rlemon/reference/GraphSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphSearch — GraphSearch","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph startNode Optional start node path endNode Optional end node path algorithm algorithm run. Choices include \"Bfs\", \"Dfs\". Bfs (Breadth First Search) default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00608.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/GraphSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GraphSearch — GraphSearch","text":"list containing three entries: 1) predecessor vertex   shortest path, 2) distances node startNode ,   3) list containing node reached ","code":""},{"path":"https://errickson.net/rlemon/reference/Input-Information.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Input Specifications — Input-Information","title":"Graph Input Specifications — Input-Information","text":"Due LEMON operates, make interfaces similar actual program, graphs rlemon use following 2 vectors: arcSources, arcTargets acquire information graph structured edge graph consist (node id, node id) pair, represented ith entry arcSources arcTargets. nodes 0-indexed, must sequential. numNodes must equal number nodes graph, otherwise potentials error . example, cycle graph three vertices following input: arcSources <- c(0,1,2) arcTargets <- c(1,2,0) numNodes <- 3 , edges (0,1), (1,2), (2,0)","code":""},{"path":"https://errickson.net/rlemon/reference/IsAcyclic.html","id":null,"dir":"Reference","previous_headings":"","what":"IsAcylic — IsAcyclic","title":"IsAcylic — IsAcyclic","text":"Checks undirected graph acyclic. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga14c191b2133a1dd23e1527f074c821c0' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsAcyclic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsAcylic — IsAcyclic","text":"","code":"IsAcyclic(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsAcyclic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsAcylic — IsAcyclic","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsAcyclic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsAcylic — IsAcyclic","text":"boolean stating graph acyclic","code":""},{"path":"https://errickson.net/rlemon/reference/IsBiEdgeConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"IsBiEdgeConnected — IsBiEdgeConnected","title":"IsBiEdgeConnected — IsBiEdgeConnected","text":"Checks undirected graph bi-edge connected. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga37d22a2ddd5a064a9203720f2b93518e' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsBiEdgeConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsBiEdgeConnected — IsBiEdgeConnected","text":"","code":"IsBiEdgeConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsBiEdgeConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsBiEdgeConnected — IsBiEdgeConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsBiEdgeConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsBiEdgeConnected — IsBiEdgeConnected","text":"boolean stating graph bi-edge connected","code":""},{"path":"https://errickson.net/rlemon/reference/IsBiNodeConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"IsBiNodeConnected — IsBiNodeConnected","title":"IsBiNodeConnected — IsBiNodeConnected","text":"Checks undirected graph bi-node connected. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga37d22a2ddd5a064a9203720f2b93518e' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsBiNodeConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsBiNodeConnected — IsBiNodeConnected","text":"","code":"IsBiNodeConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsBiNodeConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsBiNodeConnected — IsBiNodeConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsBiNodeConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsBiNodeConnected — IsBiNodeConnected","text":"boolean stating graph bi-node connected","code":""},{"path":"https://errickson.net/rlemon/reference/IsBipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"IsBipartite — IsBipartite","title":"IsBipartite — IsBipartite","text":"Checks undirected graph bipartite. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga577db110d33bd487aaad5bfffb31c6f5' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsBipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsBipartite — IsBipartite","text":"","code":"IsBipartite(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsBipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsBipartite — IsBipartite","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsBipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsBipartite — IsBipartite","text":"boolean stating graph bipartite","code":""},{"path":"https://errickson.net/rlemon/reference/IsConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"IsConnected — IsConnected","title":"IsConnected — IsConnected","text":"Checks undirected graph connected. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad5c8d1b650f6b614a852f8430d90e184' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsConnected — IsConnected","text":"","code":"IsConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsConnected — IsConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsConnected — IsConnected","text":"boolean stating graph connected","code":""},{"path":"https://errickson.net/rlemon/reference/IsDAG.html","id":null,"dir":"Reference","previous_headings":"","what":"IsDAG — IsDAG","title":"IsDAG — IsDAG","text":"Checks directed graph DAG. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaef2b43c8cd1d74e15fa5c7607bc5e396' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsDAG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsDAG — IsDAG","text":"","code":"IsDAG(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsDAG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsDAG — IsDAG","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsDAG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsDAG — IsDAG","text":"boolean stating graph DAG","code":""},{"path":"https://errickson.net/rlemon/reference/IsEulerian.html","id":null,"dir":"Reference","previous_headings":"","what":"IsEulerian — IsEulerian","title":"IsEulerian — IsEulerian","text":"Checks graph Eulerian. Works undirected directed graphs. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gafb5a4961cac4d877006869fc4cb6ea1d' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsEulerian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsEulerian — IsEulerian","text":"","code":"IsEulerian(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsEulerian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsEulerian — IsEulerian","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsEulerian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsEulerian — IsEulerian","text":"boolean stating graph Eulerian","code":""},{"path":"https://errickson.net/rlemon/reference/IsLoopFree.html","id":null,"dir":"Reference","previous_headings":"","what":"IsLoopFree — IsLoopFree","title":"IsLoopFree — IsLoopFree","text":"Checks graph loop free. Works undirected directed graphs. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga127f3963003cd532c79c226885fe1c8c' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsLoopFree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsLoopFree — IsLoopFree","text":"","code":"IsLoopFree(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsLoopFree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsLoopFree — IsLoopFree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsLoopFree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsLoopFree — IsLoopFree","text":"boolean stating graph loop free","code":""},{"path":"https://errickson.net/rlemon/reference/IsParallelFree.html","id":null,"dir":"Reference","previous_headings":"","what":"IsParallelFree — IsParallelFree","title":"IsParallelFree — IsParallelFree","text":"Checks graph parallel arcs/edges. Works undirected directed graphs. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaa05e0683f90b69f31eb29fe7d09afde4' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsParallelFree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsParallelFree — IsParallelFree","text":"","code":"IsParallelFree(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsParallelFree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsParallelFree — IsParallelFree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsParallelFree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsParallelFree — IsParallelFree","text":"boolean stating graph loop free","code":""},{"path":"https://errickson.net/rlemon/reference/IsSimpleGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"IsSimpleGraph — IsSimpleGraph","title":"IsSimpleGraph — IsSimpleGraph","text":"Checks graph simple, .e. contains loop arcs/edges parallel arcs/edges. Works undirected directed graphs. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gae4c7ae734e2509ab78dc747d602c9236' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsSimpleGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsSimpleGraph — IsSimpleGraph","text":"","code":"IsSimpleGraph(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsSimpleGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsSimpleGraph — IsSimpleGraph","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsSimpleGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsSimpleGraph — IsSimpleGraph","text":"boolean stating graph simple","code":""},{"path":"https://errickson.net/rlemon/reference/IsStronglyConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"IsStronglyConnected — IsStronglyConnected","title":"IsStronglyConnected — IsStronglyConnected","text":"Checks directed graph strongly connected. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gacd21b34d7b42b9835a204a57fcf15964' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsStronglyConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsStronglyConnected — IsStronglyConnected","text":"","code":"IsStronglyConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsStronglyConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsStronglyConnected — IsStronglyConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsStronglyConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsStronglyConnected — IsStronglyConnected","text":"boolean stating graph strongly connected","code":""},{"path":"https://errickson.net/rlemon/reference/IsTree.html","id":null,"dir":"Reference","previous_headings":"","what":"IsTree — IsTree","title":"IsTree — IsTree","text":"Checks undirected graph tree. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad1e4de234e926958647905478415bd54' information.","code":""},{"path":"https://errickson.net/rlemon/reference/IsTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsTree — IsTree","text":"","code":"IsTree(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/IsTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsTree — IsTree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/IsTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IsTree — IsTree","text":"boolean stating graph tree","code":""},{"path":"https://errickson.net/rlemon/reference/MaxCardinalityMatching.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxCardinalityMatching — MaxCardinalityMatching","title":"MaxCardinalityMatching — MaxCardinalityMatching","text":"Finds maximum cardinality matching graphs bipartite graphs.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxCardinalityMatching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxCardinalityMatching — MaxCardinalityMatching","text":"","code":"MaxCardinalityMatching(   arcSources,   arcTargets,   numNodes,   algorithm = \"MaxMatching\" )"},{"path":"https://errickson.net/rlemon/reference/MaxCardinalityMatching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxCardinalityMatching — MaxCardinalityMatching","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph algorithm algorithm want run. Choices include \"MaxMatching\", \"MaxFractionalMatching\" \"MaxMatching\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00615.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxCardinalityMatching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxCardinalityMatching — MaxCardinalityMatching","text":"list containing two entries: 1) matching value, 2) edges   final graph, List List (node, node) pairs","code":""},{"path":"https://errickson.net/rlemon/reference/MaxCardinalitySearch.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxCardinalitySearch — MaxCardinalitySearch","title":"MaxCardinalitySearch — MaxCardinalitySearch","text":"Runs maximum cardinality search algorithm directed graph. maximum cardinality search first chooses node digraph. every time chooses one unprocessed node maximum cardinality, .e sum capacities arcs nodes previously processed. cut digraph algorithm choose unprocessed node digraph.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxCardinalitySearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxCardinalitySearch — MaxCardinalitySearch","text":"","code":"MaxCardinalitySearch(   arcSources,   arcTargets,   arcCapacities,   numNodes,   startNode = -1,   algorithm = \"maxcardinalitysearch\" )"},{"path":"https://errickson.net/rlemon/reference/MaxCardinalitySearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxCardinalitySearch — MaxCardinalitySearch","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcCapacities Vector corresponding distances graph's edges numNodes number nodes graph startNode Optional start node path algorithm algorithm run. Choices include \"maxcardinalitysearch\". maxcardinalitysearch default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00255.html> information.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxCardinalitySearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxCardinalitySearch — MaxCardinalitySearch","text":"list containing two entries: 1) cardinality node , 2)   list containing node reached ","code":""},{"path":"https://errickson.net/rlemon/reference/MaxClique.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxClique — MaxClique","title":"MaxClique — MaxClique","text":"Finds largest complete subgraph (clique) undirected graph via approximation algorithms maximal clique problem.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxClique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxClique — MaxClique","text":"","code":"MaxClique(   arcSources,   arcTargets,   numNodes,   algorithm = \"GrossoLocatelliPullanMc\" )"},{"path":"https://errickson.net/rlemon/reference/MaxClique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxClique — MaxClique","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph algorithm algorithm run. Choices include \"GrossoLocatelliPullanMc\". GrossoLocatelliPullanMc default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00194.html> information.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxClique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxClique — MaxClique","text":"list containing two entries: 1) clique size, 2)   members clique.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxFlow — MaxFlow","title":"MaxFlow — MaxFlow","text":"Finds maximum flow directed graph, given source destination node.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxFlow — MaxFlow","text":"","code":"MaxFlow(   arcSources,   arcTargets,   arcCapacities,   sourceNode,   destNode,   numNodes,   algorithm )"},{"path":"https://errickson.net/rlemon/reference/MaxFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxFlow — MaxFlow","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcCapacities Vector corresponding capacities nodes graph's edges sourceNode source node destNode destination node numNodes number nodes graph algorithm algorithm run. Choices include \"Preflow\", \"EdmondsKarp\", \"Preflow\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00611.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxFlow — MaxFlow","text":"list containing three entries: 1) list corresponding   flows arcs graph, 2) list cut-values graph's nodes,   3) total cost flows graph, .e. maxflow value.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxMatching.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxMatching — MaxMatching","title":"MaxMatching — MaxMatching","text":"Finds maximum weighted matching graphs bipartite graphs. algorithm set returns different outputs depending different situations, like PerfectMatching PerfectFractionalMathing.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxMatching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxMatching — MaxMatching","text":"","code":"MaxMatching(   arcSources,   arcTargets,   arcWeights = NULL,   numNodes,   algorithm = \"MaxWeightedMatching\" )"},{"path":"https://errickson.net/rlemon/reference/MaxMatching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxMatching — MaxMatching","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's edges numNodes number nodes graph algorithm algorithm want run. Choices include \"MaxWeightedMatching\", \"MaxWeightedPerfectMatching\", \"MaxWeightedFractionalMatching\", \"MaxWeightedPerfectFractionalMatching\" \"MaxWeightedMatching\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00615.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/MaxMatching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxMatching — MaxMatching","text":"list containing two entries: 1) matching value, 2) edges   final graph, List List (node, node) pairs","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-1.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Flow Algorithms — Maximum-Flow-Algorithms-1","title":"Maximum Flow Algorithms — Maximum-Flow-Algorithms-1","text":"`PreflowRunner` runs Preflow Algorithm calculate maximum flow. `EdmondsKarpRunner` runs EdmondsKarp Algorithm calculate maximum flow.","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Flow Algorithms — Maximum-Flow-Algorithms-1","text":"","code":"PreflowRunner(   arcSources,   arcTargets,   arcDistances,   sourceNode,   destinationNode,   numNodes )  EdmondsKarpRunner(   arcSources,   arcTargets,   arcDistances,   sourceNode,   destinationNode,   numNodes )"},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Flow Algorithms — Maximum-Flow-Algorithms-1","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding capacities nodes graph's edges sourceNode source node destinationNode destination node numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Flow Algorithms — Maximum-Flow-Algorithms-1","text":"list containing three entries: 1) list corresponding flows arcs graph, 2) list cut-values graph's nodes, 3) total cost flows graph, .e. maxflow value.","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Flow Algorithms - Network Circulation — Maximum-Flow-Algorithms-2","title":"Maximum Flow Algorithms - Network Circulation — Maximum-Flow-Algorithms-2","text":"`CirculationRunner` runs Circulation Algorithm calculate maximum flow.","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Flow Algorithms - Network Circulation — Maximum-Flow-Algorithms-2","text":"","code":"CirculationRunner(   arcSources,   arcTargets,   arcLowerBound,   arcUpperBound,   nodeSupplies,   numNodes )"},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Flow Algorithms - Network Circulation — Maximum-Flow-Algorithms-2","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcLowerBound Vector corresponding lower-bound capacities nodes graph's edges arcUpperBound Vector corresponding upper-bound capacities nodes graph's edges nodeSupplies Vector corresponding supplies node graph. numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Flow-Algorithms-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Flow Algorithms - Network Circulation — Maximum-Flow-Algorithms-2","text":"list containing two entries: 1) list corresponding flows arcs graph, 2) list graph's barrier nodes.","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Matching-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Matching Algorithms — Maximum-Matching-Algorithms","title":"Maximum Matching Algorithms — Maximum-Matching-Algorithms","text":"`MaximumWeightPerfectMatchingRunner` solves Maximum-Weight Perfect Matching Problem `MaximumWeightFractionalPerfectMatchingRunner` solves Maximum-Weight Fractional Perfect Matching Problem `MaximumWeightFractionalMatchingRunner` solves Maximum-Weight Fractional Matching Problem `MaximumWeightMatchingRunner` solves Maximum-Weight Matching Problem `MaximumCardinalityMatchingRunner` solves Maximum Cardinality Matching Problem `MaximumCardinalityFractionalMatchingRunner` solves Maximum-Cardinality Fractional Matching Problem","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Matching-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Matching Algorithms — Maximum-Matching-Algorithms","text":"","code":"MaximumWeightPerfectMatchingRunner(   arcSources,   arcTargets,   arcWeights,   numNodes )  MaximumWeightFractionalPerfectMatchingRunner(   arcSources,   arcTargets,   arcWeights,   numNodes )  MaximumWeightFractionalMatchingRunner(   arcSources,   arcTargets,   arcWeights,   numNodes )  MaximumWeightMatchingRunner(arcSources, arcTargets, arcWeights, numNodes)  MaximumCardinalityMatchingRunner(arcSources, arcTargets, numNodes)  MaximumCardinalityFractionalMatchingRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Maximum-Matching-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Matching Algorithms — Maximum-Matching-Algorithms","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Matching-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Matching Algorithms — Maximum-Matching-Algorithms","text":"list containing two entries: 1) matching value, 2) edges final graph, List List (node, node) pairs","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Mean-Cycle-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum Mean-Cycle Algorithms — Maximum-Mean-Cycle-Algorithms","title":"Minimum Mean-Cycle Algorithms — Maximum-Mean-Cycle-Algorithms","text":"`HowardMmcRunner` runs Howard's policy iteration algorithm find directed cycle minimum mean cost. `KarpMmcRunner` runs Karp's algorithm find directed cycle minimum mean cost . `HartmannOrlinMmcRunner` runs Hartmann-Orlin's algorithm find directed cycle minimum mean cost .","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Mean-Cycle-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum Mean-Cycle Algorithms — Maximum-Mean-Cycle-Algorithms","text":"","code":"HowardMmcRunner(arcSources, arcTargets, arcDistances, numNodes)  KarpMmcRunner(arcSources, arcTargets, arcDistances, numNodes)  HartmannOrlinMmcRunner(arcSources, arcTargets, arcDistances, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Maximum-Mean-Cycle-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum Mean-Cycle Algorithms — Maximum-Mean-Cycle-Algorithms","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Maximum-Mean-Cycle-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum Mean-Cycle Algorithms — Maximum-Mean-Cycle-Algorithms","text":"list containing two entries: 1) vector containing costs edge MMC, 2) nodes MMC.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCostArborescence.html","id":null,"dir":"Reference","previous_headings":"","what":"MinCostArborescence — MinCostArborescence","title":"MinCostArborescence — MinCostArborescence","text":"Finds minimum cost arborescence graph, returning cost pairs nodes edges arborescence.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCostArborescence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MinCostArborescence — MinCostArborescence","text":"","code":"MinCostArborescence(   arcSources,   arcTargets,   arcDistances,   sourceNode,   numNodes,   algorithm = \"MinCostArborescence\" )"},{"path":"https://errickson.net/rlemon/reference/MinCostArborescence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MinCostArborescence — MinCostArborescence","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances nodes graph's edges sourceNode source node numNodes number nodes graph algorithm algorithm run. Choices include \"MinCostArborescence\" \"MinCostArborescence\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00264.html> information.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCostArborescence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MinCostArborescence — MinCostArborescence","text":"list containing three entries: 1) Two vectors corresponding   source target nodes edges tree, 2) total cost   arborescence.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCostFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"MinCostFlow — MinCostFlow","title":"MinCostFlow — MinCostFlow","text":"Finds minimum cost flow directed graph.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCostFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MinCostFlow — MinCostFlow","text":"","code":"MinCostFlow(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes,   algorithm = \"NetworkSimplex\" )"},{"path":"https://errickson.net/rlemon/reference/MinCostFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MinCostFlow — MinCostFlow","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcCapacities Vector corresponding capacities nodes graph's edges arcCosts Vector corresponding capacities nodes graph's edges nodeSupplies Vector corresponding supplies node numNodes number nodes graph algorithm algorithm run. Choices include \"NetworkSimplex\", \"CostScaling\", \"CapacityScaling\", \"CycleCancelling\". NetworkSimplex default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00612.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCostFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MinCostFlow — MinCostFlow","text":"list containing three entries: 1) list corresponding   flows arcs graph, 2) list potentials graph's nodes,   3) total cost flows graph, .e. mincostflow   value","code":""},{"path":"https://errickson.net/rlemon/reference/MinCut.html","id":null,"dir":"Reference","previous_headings":"","what":"MinCut — MinCut","title":"MinCut — MinCut","text":"Finds minimum cut graphs. NagamochiIbaraki calculates min cut value edges undirected graphs,HaoOrlin calculates min cut value edges directed graphs.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MinCut — MinCut","text":"","code":"MinCut(arcSources, arcTargets, arcWeights, numNodes, algorithm)"},{"path":"https://errickson.net/rlemon/reference/MinCut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MinCut — MinCut","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's arcs numNodes number nodes graph algorithm algorithm run. Choices include \"NagamochiIbaraki\", \"HaoOrlin\" NagamochiIbaraki default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00613.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/MinCut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MinCut — MinCut","text":"list containing three entries: 1) value minimum cut   graph, 2) list nodes first partition, 3) list   nodes second partition. GomoryHu calculates Gomory-Hu Tree   returns list containing three entries: 1) list predecessor nodes   node graph, 2) list weights predecessor edge   node, 3) list distances root node node.","code":""},{"path":"https://errickson.net/rlemon/reference/MinMeanCycle.html","id":null,"dir":"Reference","previous_headings":"","what":"MinimumMeanCycle — MinMeanCycle","title":"MinimumMeanCycle — MinMeanCycle","text":"Finds Minimum Mean Cycle directed graphs.","code":""},{"path":"https://errickson.net/rlemon/reference/MinMeanCycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MinimumMeanCycle — MinMeanCycle","text":"","code":"MinMeanCycle(   arcSources,   arcTargets,   arcDistances,   numNodes,   algorithm = \"Howard\" )"},{"path":"https://errickson.net/rlemon/reference/MinMeanCycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MinimumMeanCycle — MinMeanCycle","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph algorithm algorithm run. Choices include \"Howard\", \"Karp\", \"HartmannOrlin\" \"Howard\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00614.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/MinMeanCycle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MinimumMeanCycle — MinMeanCycle","text":"list containing two entries: 1) vector containing costs   edge MMC, 2) nodes MMC.","code":""},{"path":"https://errickson.net/rlemon/reference/MinSpanningTree.html","id":null,"dir":"Reference","previous_headings":"","what":"MinSpanningTree — MinSpanningTree","title":"MinSpanningTree — MinSpanningTree","text":"Finds minimum spanning tree graph. minimum spanning tree minimal connected acyclic subgraph graph, assuming graph undirected.","code":""},{"path":"https://errickson.net/rlemon/reference/MinSpanningTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MinSpanningTree — MinSpanningTree","text":"","code":"MinSpanningTree(   arcSources,   arcTargets,   arcDistances,   numNodes,   algorithm = \"Kruskal\" )"},{"path":"https://errickson.net/rlemon/reference/MinSpanningTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MinSpanningTree — MinSpanningTree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances nodes graph's edges numNodes number nodes graph algorithm algorithm run. Choices include \"Kruskal\" \"Kruskal\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00610.html#ga233792b2c44a3581b85a775703e045af> information.","code":""},{"path":"https://errickson.net/rlemon/reference/MinSpanningTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MinSpanningTree — MinSpanningTree","text":"list containing three entries: 1) Two vectors corresponding   source target nodes edges tree, 2) total minimum   spanning tree value.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Arborescence-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Arborescence Algorithms — Minimum-Cost-Arborescence-Algorithms","title":"Arborescence Algorithms — Minimum-Cost-Arborescence-Algorithms","text":"Arborescence Algorithms","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Arborescence-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arborescence Algorithms — Minimum-Cost-Arborescence-Algorithms","text":"","code":"MinCostArborescenceRunner(   arcSources,   arcTargets,   arcDistances,   sourceNode,   numNodes )"},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Arborescence-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arborescence Algorithms — Minimum-Cost-Arborescence-Algorithms","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances nodes graph's edges sourceNode source node numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Arborescence-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arborescence Algorithms — Minimum-Cost-Arborescence-Algorithms","text":"list containing three entries: 1) Two vectors corresponding source target nodes edges tree, 2) total cost arborescence.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Flow-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum Cost Flow Algorithms — Minimum-Cost-Flow-Algorithms","title":"Minimum Cost Flow Algorithms — Minimum-Cost-Flow-Algorithms","text":"`CycleCancellingRunner` runs Cycle-Cancelling Algorithm calculate minimum cost flow. `CapacityScalingRunner` runs Capacity-Scaling Algorithm calculate minimum cost flow. `CostScalingRunner` runs Cost-Scaling Algorithm calculate minimum cost flow. `NetworkSimplexRunner` runs Network-Simplex Algorithm calculate minimum cost flow.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Flow-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum Cost Flow Algorithms — Minimum-Cost-Flow-Algorithms","text":"","code":"CycleCancellingRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  CapacityScalingRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  CostScalingRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  NetworkSimplexRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )"},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Flow-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum Cost Flow Algorithms — Minimum-Cost-Flow-Algorithms","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges arcCapacities, vector corresponding capacities nodes graph's edges arcCosts, vector corresponding capacities nodes graph's edges nodeSupplies, vector corresponding supplies node numNodes, number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cost-Flow-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum Cost Flow Algorithms — Minimum-Cost-Flow-Algorithms","text":"list containing three entries: 1) list corresponding flows arcs graph, 2) list potentials graph's nodes, 3) total cost flows graph, .e. mincostflow value","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-1.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum Cut Algorithms — Minimum-Cut-Algorithms-1","title":"Minimum Cut Algorithms — Minimum-Cut-Algorithms-1","text":"`NagamochiIbarakiRunner` runs Nagamochi-Ibaraki Algorithm calculate minimum cut. `HaoOrlinRunner` runs Hao-Orlin Algorithm calculate minimum cut.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum Cut Algorithms — Minimum-Cut-Algorithms-1","text":"","code":"NagamochiIbarakiRunner(arcSources, arcTargets, arcWeights, numNodes)  HaoOrlinRunner(arcSources, arcTargets, arcWeights, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum Cut Algorithms — Minimum-Cut-Algorithms-1","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum Cut Algorithms — Minimum-Cut-Algorithms-1","text":"list containing three entries: 1) value minimum cut graph, 2) list nodes first partition, 3) list nodes second partition.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum Cut Algorithms - Gomory Hu Tree — Minimum-Cut-Algorithms-2","title":"Minimum Cut Algorithms - Gomory Hu Tree — Minimum-Cut-Algorithms-2","text":"`GomoryHuTreeRunner` runs Gomory-Hu Algorithm calculate rooted Gomory Hu Tree.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum Cut Algorithms - Gomory Hu Tree — Minimum-Cut-Algorithms-2","text":"","code":"GomoryHuTreeRunner(arcSources, arcTargets, arcWeights, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum Cut Algorithms - Gomory Hu Tree — Minimum-Cut-Algorithms-2","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Cut-Algorithms-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum Cut Algorithms - Gomory Hu Tree — Minimum-Cut-Algorithms-2","text":"Calculates Gomory-Hu Tree returns list containing three entries: 1) list predecessor nodes node graph, 2) list weights predecessor edge node, 3) list distances root node node.","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Spanning-Tree-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"MST Algorithms — Minimum-Spanning-Tree-Algorithms","title":"MST Algorithms — Minimum-Spanning-Tree-Algorithms","text":"MST Algorithms","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Spanning-Tree-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MST Algorithms — Minimum-Spanning-Tree-Algorithms","text":"","code":"KruskalRunner(arcSources, arcTargets, arcDistances, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Minimum-Spanning-Tree-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MST Algorithms — Minimum-Spanning-Tree-Algorithms","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Minimum-Spanning-Tree-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MST Algorithms — Minimum-Spanning-Tree-Algorithms","text":"list containing three entries: 1) Two vectors corresponding source target nodes edges tree, 2) total minimum spanning tree value.","code":""},{"path":"https://errickson.net/rlemon/reference/NetworkCirculation.html","id":null,"dir":"Reference","previous_headings":"","what":"NetworkCirculation — NetworkCirculation","title":"NetworkCirculation — NetworkCirculation","text":"Finds solution network circulation problem via push-relabel circulation algorithm.","code":""},{"path":"https://errickson.net/rlemon/reference/NetworkCirculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NetworkCirculation — NetworkCirculation","text":"","code":"NetworkCirculation(   arcSources,   arcTargets,   arcLowerBound,   arcUpperBound,   nodeSupplies,   numNodes,   algorithm )"},{"path":"https://errickson.net/rlemon/reference/NetworkCirculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetworkCirculation — NetworkCirculation","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcLowerBound Vector corresponding lower-bound capacities nodes graph's edges arcUpperBound Vector corresponding upper-bound capacities nodes graph's edges nodeSupplies Vector corresponding supplies node graph. numNodes number nodes graph algorithm algorithm run. Choices include \"Circulation\" \"Circulation\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00078.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/NetworkCirculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NetworkCirculation — NetworkCirculation","text":"list containing two entries: 1) list corresponding flows   arcs graph, 2) list graph's barrier nodes.","code":""},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Planar Embedding Algorithms — Planar-Embedding-Algorithms-2","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms-2","text":"`PlanarEmbeddingRunner` runs Planar Embedding Algorithm prove graph planar .","code":""},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms-2","text":"","code":"PlanarEmbeddingRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms-2","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms-2","text":"list containing following 1) boolean graph planar , 2) start/end node lists vertices order Planar Embedding (planar), 3) start/end node lists arcs kuratowski subdivision (planar)","code":""},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Planar Embedding Algorithms — Planar-Embedding-Algorithms","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms","text":"`PlanarCheckingRunner` returns boolean stating graph planar . `PlanarColoringRunner` returns List containing 1) Boolean stating graph planar , 2) vector containing colors node, represented integers `PlanarCheckingRunner` returns List containing 1) boolean stating graph planar , 2) vector containing x-coordinates node 3) vector containing y-coordinates node","code":""},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms","text":"","code":"PlanarCheckingRunner(arcSources, arcTargets, numNodes)  PlanarColoringRunner(arcSources, arcTargets, numNodes, useFiveAlg = TRUE)  PlanarDrawingRunner(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms","text":"arcSources, vector corresponding source nodes graph's edges arcTargets, vector corresponding destination nodes graph's edges numNodes, number nodes graph useFiveAlg, boolean asks want 5-color graph. false, runs faster 6-coloring algorithm instead.","code":""},{"path":"https://errickson.net/rlemon/reference/Planar-Embedding-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Planar Embedding Algorithms — Planar-Embedding-Algorithms","text":"assorted values, depending function","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarChecking.html","id":null,"dir":"Reference","previous_headings":"","what":"PlanarChecking — PlanarChecking","title":"PlanarChecking — PlanarChecking","text":"Checks undirected graph planar. See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00617.html#ga230242aa2ee36f9b1b5a58f2c53016eb' information.","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarChecking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlanarChecking — PlanarChecking","text":"","code":"PlanarChecking(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/PlanarChecking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlanarChecking — PlanarChecking","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarChecking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlanarChecking — PlanarChecking","text":"boolean stating graph planar .","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarColoring.html","id":null,"dir":"Reference","previous_headings":"","what":"PlanarColoring — PlanarColoring","title":"PlanarColoring — PlanarColoring","text":"Checks graph planar returns coloring graph See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00306.html' information.","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarColoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlanarColoring — PlanarColoring","text":"","code":"PlanarColoring(arcSources, arcTargets, numNodes, algorithm = \"fiveColoring\")"},{"path":"https://errickson.net/rlemon/reference/PlanarColoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlanarColoring — PlanarColoring","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph algorithm, algorithm use. \"sixColoring\" generates 6-coloring graph, \"fiveColoring\" generates 5-coloring.","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarColoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlanarColoring — PlanarColoring","text":"list containing 1) boolean graph planar, 2) color   vertex graph","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarDrawing.html","id":null,"dir":"Reference","previous_headings":"","what":"PlanarDrawing — PlanarDrawing","title":"PlanarDrawing — PlanarDrawing","text":"Checks graph planar returns coloring graph See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00307.html' information.","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarDrawing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlanarDrawing — PlanarDrawing","text":"","code":"PlanarDrawing(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/PlanarDrawing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlanarDrawing — PlanarDrawing","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarDrawing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlanarDrawing — PlanarDrawing","text":"list 1) boolean graph planar, 2)   x-coordinate planar embedding, 3) y-coordinate planar   embedding","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarEmbedding.html","id":null,"dir":"Reference","previous_headings":"","what":"PlanarEmbedding — PlanarEmbedding","title":"PlanarEmbedding — PlanarEmbedding","text":"Checks undirected graph planar returns list outputs related planar embedding See 'https://lemon.cs.elte.hu/pub/doc/1.3.1/a00308.html' information.","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarEmbedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlanarEmbedding — PlanarEmbedding","text":"","code":"PlanarEmbedding(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/PlanarEmbedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlanarEmbedding — PlanarEmbedding","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/reference/PlanarEmbedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlanarEmbedding — PlanarEmbedding","text":"list containing 1) boolean graph planar, 2) start   nodes arcs embedding, 3) end nodes arcs   planar embedding, 4) start nodes edges kuratowski   subdivision, 5) end nodes edges kuratowski subdivision.","code":""},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-1.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest Path Algorithms - Distance — Shortest-Path-Algorithms-1","title":"Shortest Path Algorithms - Distance — Shortest-Path-Algorithms-1","text":"`DijkstraRunner` calculates shortest path start node node graph returns list containing 1) distances node startNode 2) predecessor vertex shortest path. `BellmanFordRunner` calculates shortest path start node node graph returns list containing 1) distances node startNode 2) predecessor vertex shortest path.","code":""},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest Path Algorithms - Distance — Shortest-Path-Algorithms-1","text":"","code":"DijkstraRunner(arcSources, arcTargets, arcDistances, numNodes, startNode)  BellmanFordRunner(arcSources, arcTargets, arcDistances, numNodes, startNode)"},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest Path Algorithms - Distance — Shortest-Path-Algorithms-1","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph startNode start node path","code":""},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest Path Algorithms - Distance — Shortest-Path-Algorithms-1","text":"list containing two entries: 1) distances node startNode 2) predecessor vertex shortest path.","code":""},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest Path Algorithms - Paths — Shortest-Path-Algorithms-2","title":"Shortest Path Algorithms - Paths — Shortest-Path-Algorithms-2","text":"`SuurballeRunner` calculates shortest path specified start end node returns list containing  1) number arc disjoint paths start node end node 2) list paths found.","code":""},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest Path Algorithms - Paths — Shortest-Path-Algorithms-2","text":"","code":"SuurballeRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   startNode,   endNode )"},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest Path Algorithms - Paths — Shortest-Path-Algorithms-2","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph startNode start node path endNode end node path","code":""},{"path":"https://errickson.net/rlemon/reference/Shortest-Path-Algorithms-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest Path Algorithms - Paths — Shortest-Path-Algorithms-2","text":"list containing two entries: 1) number arc disjoint paths start node end node 2) list paths found.","code":""},{"path":"https://errickson.net/rlemon/reference/ShortestPath.html","id":null,"dir":"Reference","previous_headings":"","what":"ShortestPath — ShortestPath","title":"ShortestPath — ShortestPath","text":"Finds shortest arc disjoint paths two nodes directed graph. implementation runs variation successive shortest path algorithm.","code":""},{"path":"https://errickson.net/rlemon/reference/ShortestPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ShortestPath — ShortestPath","text":"","code":"ShortestPath(   arcSources,   arcTargets,   arcDistances,   numNodes,   sourceNode,   destNode,   algorithm = \"Suurballe\" )"},{"path":"https://errickson.net/rlemon/reference/ShortestPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ShortestPath — ShortestPath","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph sourceNode start node path destNode end node path algorithm algorithm run. Choices include \"Suurballe\" \"Suurballe\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00420.html> information.","code":""},{"path":"https://errickson.net/rlemon/reference/ShortestPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ShortestPath — ShortestPath","text":"list containing two entries: 1) number paths start   node end node 2) list paths found.","code":""},{"path":"https://errickson.net/rlemon/reference/ShortestPathFromSource.html","id":null,"dir":"Reference","previous_headings":"","what":"ShortestPathFromSource — ShortestPathFromSource","title":"ShortestPathFromSource — ShortestPathFromSource","text":"Finds shortest path source node rest nodes directed graph. shortest path algorithms consider distances present graph, well number edges.","code":""},{"path":"https://errickson.net/rlemon/reference/ShortestPathFromSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ShortestPathFromSource — ShortestPathFromSource","text":"","code":"ShortestPathFromSource(   arcSources,   arcTargets,   arcDistances,   numNodes,   sourceNode,   algorithm = \"Dijkstra\" )"},{"path":"https://errickson.net/rlemon/reference/ShortestPathFromSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ShortestPathFromSource — ShortestPathFromSource","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph sourceNode start node path algorithm algorithm run. Choices include \"Dijkstra\", \"BellmanFord\" \"Dijkstra\" default. See <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00609.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/ShortestPathFromSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ShortestPathFromSource — ShortestPathFromSource","text":"list containing two entries: 1) distances node   startNode 2) predecessor vertex shortest path.","code":""},{"path":"https://errickson.net/rlemon/reference/TSP-Algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Traveling Salesperson Algorithms on Full Graphs — TSP-Algorithms","title":"Traveling Salesperson Algorithms on Full Graphs — TSP-Algorithms","text":"`ChristofidesRunner` runs Christofides Heuristic `GreedyTSPRunner` runs Greedy Heuristic `InsertionTSPRunner` runs Insertion Heuristic `NearestNeighborTSPRunner` runs Nearest-Neighbor Heuristic `Opt2TSPRunner` runs 2-OPT heuristic","code":""},{"path":"https://errickson.net/rlemon/reference/TSP-Algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traveling Salesperson Algorithms on Full Graphs — TSP-Algorithms","text":"","code":"ChristofidesRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  GreedyTSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  InsertionTSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  NearestNeighborTSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  Opt2TSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )"},{"path":"https://errickson.net/rlemon/reference/TSP-Algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traveling Salesperson Algorithms on Full Graphs — TSP-Algorithms","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph defaultEdgeWeight default edge weight edge -specified (default value 999999)","code":""},{"path":"https://errickson.net/rlemon/reference/TSP-Algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Traveling Salesperson Algorithms on Full Graphs — TSP-Algorithms","text":"list 1) list tour vertices, 2) total tour cost","code":""},{"path":"https://errickson.net/rlemon/reference/TravelingSalesperson.html","id":null,"dir":"Reference","previous_headings":"","what":"TravelingSalespersonProblem — TravelingSalesperson","title":"TravelingSalespersonProblem — TravelingSalesperson","text":"Finds approximations travelling salesperson problem using approximation algorithms graphs. NOTE: LEMON's TSP uses complete graph backend, expect less performance sparse graphs.","code":""},{"path":"https://errickson.net/rlemon/reference/TravelingSalesperson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TravelingSalespersonProblem — TravelingSalesperson","text":"","code":"TravelingSalesperson(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999,   algorithm = \"Christofides\" )  TravellingSalesperson(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999,   algorithm = \"Christofides\" )"},{"path":"https://errickson.net/rlemon/reference/TravelingSalesperson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TravelingSalespersonProblem — TravelingSalesperson","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph defaultEdgeWeight default edge weight edge -specified (default value 999999) algorithm algorithm run. Choices include \"Christofides\",\"Greedy\",\"Insertion\",\"NearestNeighbor\",\"Opt2\". Christofides default; see <https://lemon.cs.elte.hu/pub/doc/1.3.1/a00618.html> details differences.","code":""},{"path":"https://errickson.net/rlemon/reference/TravelingSalesperson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TravelingSalespersonProblem — TravelingSalesperson","text":"List 1) list tour vertices, 2) total tour cost","code":""},{"path":"https://errickson.net/rlemon/reference/check_arc_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Check arc maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of arcs in the graph is the same as the number in the map. — check_arc_map","title":"Check arc maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of arcs in the graph is the same as the number in the map. — check_arc_map","text":"Check arc maps common errors. check underlying graph correct - see `check_graph_vertices` purpose. Specifically checks number arcs graph number map.","code":""},{"path":"https://errickson.net/rlemon/reference/check_arc_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check arc maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of arcs in the graph is the same as the number in the map. — check_arc_map","text":"","code":"check_arc_map(arcSources, arcTargets, mapTest, numNodes)"},{"path":"https://errickson.net/rlemon/reference/check_arc_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check arc maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of arcs in the graph is the same as the number in the map. — check_arc_map","text":"arcSources Arc sources arcTargets Arc Targets mapTest Arc Map Test numNodes Number nodes","code":""},{"path":"https://errickson.net/rlemon/reference/check_arc_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check arc maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of arcs in the graph is the same as the number in the map. — check_arc_map","text":"TRUE errors found export","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Check graph inputs for common issues. Specifically checks if\narc source, target, capacity, and cost arrays have the same length.\nAdditionally, checks if all arc sources and targets are integral. — check_graph","title":"Check graph inputs for common issues. Specifically checks if\narc source, target, capacity, and cost arrays have the same length.\nAdditionally, checks if all arc sources and targets are integral. — check_graph","text":"Check graph inputs common issues. Specifically checks arc source, target, capacity, cost arrays length. Additionally, checks arc sources targets integral.","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check graph inputs for common issues. Specifically checks if\narc source, target, capacity, and cost arrays have the same length.\nAdditionally, checks if all arc sources and targets are integral. — check_graph","text":"","code":"check_graph(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )"},{"path":"https://errickson.net/rlemon/reference/check_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check graph inputs for common issues. Specifically checks if\narc source, target, capacity, and cost arrays have the same length.\nAdditionally, checks if all arc sources and targets are integral. — check_graph","text":"arcSources Arc sources arcTargets Arc targets arcCapacities Arc capacities arcCosts Arc costs nodeSupplies Node supplies numNodes Number nodes","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check graph inputs for common issues. Specifically checks if\narc source, target, capacity, and cost arrays have the same length.\nAdditionally, checks if all arc sources and targets are integral. — check_graph","text":"TRUE errors found.","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph_arcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check arcs for common errors. Specifically, check that\nthe number of source nodes is the same as the number of target\nnodes, and that all arc sources and targets are integral. — check_graph_arcs","title":"Check arcs for common errors. Specifically, check that\nthe number of source nodes is the same as the number of target\nnodes, and that all arc sources and targets are integral. — check_graph_arcs","text":"Check arcs common errors. Specifically, check number source nodes number target nodes, arc sources targets integral.","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph_arcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check arcs for common errors. Specifically, check that\nthe number of source nodes is the same as the number of target\nnodes, and that all arc sources and targets are integral. — check_graph_arcs","text":"","code":"check_graph_arcs(arcSources, arcTargets)"},{"path":"https://errickson.net/rlemon/reference/check_graph_arcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check arcs for common errors. Specifically, check that\nthe number of source nodes is the same as the number of target\nnodes, and that all arc sources and targets are integral. — check_graph_arcs","text":"arcSources Arc sources arcTargets Arc Targets","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph_arcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check arcs for common errors. Specifically, check that\nthe number of source nodes is the same as the number of target\nnodes, and that all arc sources and targets are integral. — check_graph_arcs","text":"TRUE errors found export","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Check sources and target arrays for common errors. Specifically checks that graphs\nfollow 1-indexing conventions, that the number of source and target nodes are the same,\nand that all node indices are integral. — check_graph_vertices","title":"Check sources and target arrays for common errors. Specifically checks that graphs\nfollow 1-indexing conventions, that the number of source and target nodes are the same,\nand that all node indices are integral. — check_graph_vertices","text":"Check sources target arrays common errors. Specifically checks graphs follow 1-indexing conventions, number source target nodes , node indices integral.","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check sources and target arrays for common errors. Specifically checks that graphs\nfollow 1-indexing conventions, that the number of source and target nodes are the same,\nand that all node indices are integral. — check_graph_vertices","text":"","code":"check_graph_vertices(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/reference/check_graph_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check sources and target arrays for common errors. Specifically checks that graphs\nfollow 1-indexing conventions, that the number of source and target nodes are the same,\nand that all node indices are integral. — check_graph_vertices","text":"arcSources Arc sources arcTargets Arc Targets numNodes Number nodes","code":""},{"path":"https://errickson.net/rlemon/reference/check_graph_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check sources and target arrays for common errors. Specifically checks that graphs\nfollow 1-indexing conventions, that the number of source and target nodes are the same,\nand that all node indices are integral. — check_graph_vertices","text":"TRUE errors found export","code":""},{"path":"https://errickson.net/rlemon/reference/check_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Check node definitions for common errors. Specifically,\nchecks that all nodes are integral, and that they are consistent\nwith 1-based indexing. — check_node","title":"Check node definitions for common errors. Specifically,\nchecks that all nodes are integral, and that they are consistent\nwith 1-based indexing. — check_node","text":"Check node definitions common errors. Specifically, checks nodes integral, consistent 1-based indexing.","code":""},{"path":"https://errickson.net/rlemon/reference/check_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check node definitions for common errors. Specifically,\nchecks that all nodes are integral, and that they are consistent\nwith 1-based indexing. — check_node","text":"","code":"check_node(testNode, numNodes)"},{"path":"https://errickson.net/rlemon/reference/check_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check node definitions for common errors. Specifically,\nchecks that all nodes are integral, and that they are consistent\nwith 1-based indexing. — check_node","text":"testNode Node test numNodes Number nodes","code":""},{"path":"https://errickson.net/rlemon/reference/check_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check node definitions for common errors. Specifically,\nchecks that all nodes are integral, and that they are consistent\nwith 1-based indexing. — check_node","text":"TRUE errors found export","code":""},{"path":"https://errickson.net/rlemon/reference/check_node_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Check node maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of nodes is inconsistent. — check_node_map","title":"Check node maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of nodes is inconsistent. — check_node_map","text":"Check node maps common errors. check underlying graph correct - see `check_graph_vertices` purpose. Specifically checks number nodes inconsistent.","code":""},{"path":"https://errickson.net/rlemon/reference/check_node_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check node maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of nodes is inconsistent. — check_node_map","text":"","code":"check_node_map(mapTest, numNodes)"},{"path":"https://errickson.net/rlemon/reference/check_node_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check node maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of nodes is inconsistent. — check_node_map","text":"mapTest Node Map Test numNodes Number nodes","code":""},{"path":"https://errickson.net/rlemon/reference/check_node_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check node maps for common errors. Doesn't check if the underlying graph is\ncorrect - see `check_graph_vertices` for that purpose. Specifically checks\nif the number of nodes is inconsistent. — check_node_map","text":"TRUE errors found export","code":""},{"path":"https://errickson.net/rlemon/reference/small_graph_example.html","id":null,"dir":"Reference","previous_headings":"","what":"A small network graph example — small_graph_example","title":"A small network graph example — small_graph_example","text":"small network graph example","code":""},{"path":"https://errickson.net/rlemon/reference/small_graph_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A small network graph example — small_graph_example","text":"","code":"small_graph_example"},{"path":"https://errickson.net/rlemon/reference/small_graph_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A small network graph example — small_graph_example","text":"list length 5.","code":""},{"path":"https://errickson.net/rlemon/news/index.html","id":"rlemon-010","dir":"Changelog","previous_headings":"","what":"rlemon 0.1.0","title":"rlemon 0.1.0","text":"CRAN release: 2022-03-11 First release!","code":""}]
