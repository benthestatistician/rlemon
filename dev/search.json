[{"path":"https://errickson.net/rlemon/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arav Agarwal. Author. Aditya Tewari. Author. Josh Errickson. Maintainer, author.","code":""},{"path":"https://errickson.net/rlemon/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Agarwal , Tewari , Errickson J (2022). rlemon: R Access LEMON Graph Algorithms. R package version 0.2.0.9000, https://errickson.net/rlemon.","code":"@Manual{,   title = {rlemon: R Access to LEMON Graph Algorithms},   author = {Arav Agarwal and Aditya Tewari and Josh Errickson},   year = {2022},   note = {R package version 0.2.0.9000},   url = {https://errickson.net/rlemon}, }"},{"path":"https://errickson.net/rlemon/dev/index.html","id":"rlemon-r-interface-to-lemon-solver","dir":"","previous_headings":"","what":"R Access to LEMON Graph Algorithms","title":"R Access to LEMON Graph Algorithms","text":"Package website: release | development rlemon provides convenient access LEMON C++ graph library. Built recent version LEMON (1.3.1), provides R interface algorithms solve following problems:","code":""},{"path":"https://errickson.net/rlemon/dev/index.html","id":"1-indexing-vs-0-indexing","dir":"","previous_headings":"","what":"1-indexing vs 0-indexing","title":"R Access to LEMON Graph Algorithms","text":"LEMON C++ library uses 0-indexing, common C++, meaning graph 5 nodes labeled 0 4. R almost exclusively uses 1-indexing, meaning graph 5 nodes labeled 1 5. consistency R, function R expect 1-indexing, convert 0-indexing passing C++.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/AllPairsMinCut.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for All-Pairs MinCut — AllPairsMinCut","title":"Solver for All-Pairs MinCut — AllPairsMinCut","text":"Finds -pairs minimum cut tree, using Gomory-Hu algorithm.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/AllPairsMinCut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for All-Pairs MinCut — AllPairsMinCut","text":"","code":"AllPairsMinCut(   arcSources,   arcTargets,   arcWeights,   numNodes,   algorithm = \"GomoryHu\" )"},{"path":"https://errickson.net/rlemon/dev/reference/AllPairsMinCut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for All-Pairs MinCut — AllPairsMinCut","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's arcs numNodes number nodes graph algorithm Choices algorithm include \"GomoryHu\". \"GomoryHu\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/AllPairsMinCut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for All-Pairs MinCut — AllPairsMinCut","text":"list containing three entries: 1) list predecessor nodes   node graph, 2) list weights predecessor edge   node, 3) list distances root node node.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/AllPairsMinCut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for All-Pairs MinCut — AllPairsMinCut","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00182.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiEdgeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Number of Bi-Edge-Connected Components — CountBiEdgeConnectedComponents","title":"Count Number of Bi-Edge-Connected Components — CountBiEdgeConnectedComponents","text":"Counts number bi-edge-connected components undirected graph.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiEdgeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Number of Bi-Edge-Connected Components — CountBiEdgeConnectedComponents","text":"","code":"CountBiEdgeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/CountBiEdgeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Number of Bi-Edge-Connected Components — CountBiEdgeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiEdgeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Number of Bi-Edge-Connected Components — CountBiEdgeConnectedComponents","text":"integer defining number bi-edge-connected components","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiEdgeConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Number of Bi-Edge-Connected Components — CountBiEdgeConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga4d5db78dc21099d075c3967484990954 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiNodeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Number of Bi-Node-Connected Components — CountBiNodeConnectedComponents","title":"Count Number of Bi-Node-Connected Components — CountBiNodeConnectedComponents","text":"Counts number bi-node-connected components undirected graph.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiNodeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Number of Bi-Node-Connected Components — CountBiNodeConnectedComponents","text":"","code":"CountBiNodeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/CountBiNodeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Number of Bi-Node-Connected Components — CountBiNodeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiNodeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Number of Bi-Node-Connected Components — CountBiNodeConnectedComponents","text":"integer defining number bi-node-connected components","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountBiNodeConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Number of Bi-Node-Connected Components — CountBiNodeConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaf7c5744b2175210b8ea67897aaa27885 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the Number of Connected Components — CountConnectedComponents","title":"Count the Number of Connected Components — CountConnectedComponents","text":"connected components classes equivalence relation nodes undirected graph. Two nodes class connected path.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the Number of Connected Components — CountConnectedComponents","text":"","code":"CountConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/CountConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the Number of Connected Components — CountConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the Number of Connected Components — CountConnectedComponents","text":"integer defining number connected components","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count the Number of Connected Components — CountConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga33a9d9d4803cb15e83568b2526e978a5 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountStronglyConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the Number of Strongly Connected Components — CountStronglyConnectedComponents","title":"Count the Number of Strongly Connected Components — CountStronglyConnectedComponents","text":"strongly connected components classes equivalence relation nodes directed graph. Two nodes class connected directed paths direction.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountStronglyConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the Number of Strongly Connected Components — CountStronglyConnectedComponents","text":"","code":"CountStronglyConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/CountStronglyConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the Number of Strongly Connected Components — CountStronglyConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountStronglyConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the Number of Strongly Connected Components — CountStronglyConnectedComponents","text":"integer defining number strongly connected components","code":""},{"path":"https://errickson.net/rlemon/dev/reference/CountStronglyConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count the Number of Strongly Connected Components — CountStronglyConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad30bc47dfffb78234eeee903cb3766f4 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Bi-Edge-Connected Components — FindBiEdgeConnectedComponents","title":"Find Bi-Edge-Connected Components — FindBiEdgeConnectedComponents","text":"bi-edge-connected components classes equivalence relation nodes undirected graph. Two nodes class connected least two edge-disjoint paths.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bi-Edge-Connected Components — FindBiEdgeConnectedComponents","text":"","code":"FindBiEdgeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bi-Edge-Connected Components — FindBiEdgeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bi-Edge-Connected Components — FindBiEdgeConnectedComponents","text":"list containing node id bi-edge-connected component.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bi-Edge-Connected Components — FindBiEdgeConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga76c1fdd1881d21677507100b7e96c983 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedCutEdges.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Bi-Edge-Connected Cut Edges — FindBiEdgeConnectedCutEdges","title":"Find Bi-Edge-Connected Cut Edges — FindBiEdgeConnectedCutEdges","text":"bi-edge-connected components classes equivalence relation nodes undirected graph. Two nodes class connected least two edge-disjoint paths. bi-edge-connected components separted cut edges components.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedCutEdges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bi-Edge-Connected Cut Edges — FindBiEdgeConnectedCutEdges","text":"","code":"FindBiEdgeConnectedCutEdges(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedCutEdges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bi-Edge-Connected Cut Edges — FindBiEdgeConnectedCutEdges","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedCutEdges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bi-Edge-Connected Cut Edges — FindBiEdgeConnectedCutEdges","text":"list containing 1) list cut edge sources, 2) list cut   edge destinations.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiEdgeConnectedCutEdges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bi-Edge-Connected Cut Edges — FindBiEdgeConnectedCutEdges","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga58d444eba448c5f1a53539bd1b69636e information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Bi-Node-Connected Components — FindBiNodeConnectedComponents","title":"Find Bi-Node-Connected Components — FindBiNodeConnectedComponents","text":"bi-node-connected components classes equivalence relation edges undirected graph. Two edges class circle.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bi-Node-Connected Components — FindBiNodeConnectedComponents","text":"","code":"FindBiNodeConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bi-Node-Connected Components — FindBiNodeConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bi-Node-Connected Components — FindBiNodeConnectedComponents","text":"list containing arc id bi-node-connected component","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bi-Node-Connected Components — FindBiNodeConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga9d70526ab54e10b4b6fe3762af8675dd information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedCutNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Bi-Node-Connected Cut Nodes — FindBiNodeConnectedCutNodes","title":"Find Bi-Node-Connected Cut Nodes — FindBiNodeConnectedCutNodes","text":"bi-node-connected components classes equivalence relation edges undirected graph. Two edges class circle.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedCutNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bi-Node-Connected Cut Nodes — FindBiNodeConnectedCutNodes","text":"","code":"FindBiNodeConnectedCutNodes(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedCutNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bi-Node-Connected Cut Nodes — FindBiNodeConnectedCutNodes","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedCutNodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bi-Node-Connected Cut Nodes — FindBiNodeConnectedCutNodes","text":"list containing cut nodes.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindBiNodeConnectedCutNodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bi-Node-Connected Cut Nodes — FindBiNodeConnectedCutNodes","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga31461f33a748327ea3ef2a3199ffb6c7 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Connected Components — FindConnectedComponents","title":"Find Connected Components — FindConnectedComponents","text":"connected components classes equivalence relation nodes undirected graph. Two nodes class connected path.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Connected Components — FindConnectedComponents","text":"","code":"FindConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Connected Components — FindConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Connected Components — FindConnectedComponents","text":"list containing node id connected component.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Connected Components — FindConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaa467a3e0a8c2e9e762650fd01fadff89 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Strongly Connected Components — FindStronglyConnectedComponents","title":"Find Strongly Connected Components — FindStronglyConnectedComponents","text":"strongly connected components classes equivalence relation nodes directed graph. Two nodes class connected directed paths direction.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Strongly Connected Components — FindStronglyConnectedComponents","text":"","code":"FindStronglyConnectedComponents(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Strongly Connected Components — FindStronglyConnectedComponents","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Strongly Connected Components — FindStronglyConnectedComponents","text":"list containing node id strongly connected component.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedComponents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Strongly Connected Components — FindStronglyConnectedComponents","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga46f8c22f3e2989c4689faa4c46ec9436 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedCutArcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Strongly Connected Cut Arcs — FindStronglyConnectedCutArcs","title":"Find Strongly Connected Cut Arcs — FindStronglyConnectedCutArcs","text":"strongly connected components classes equivalence relation nodes directed graph. Two nodes class connected directed paths direction. strongly connected components separated cut arcs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedCutArcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Strongly Connected Cut Arcs — FindStronglyConnectedCutArcs","text":"","code":"FindStronglyConnectedCutArcs(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedCutArcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Strongly Connected Cut Arcs — FindStronglyConnectedCutArcs","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedCutArcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Strongly Connected Cut Arcs — FindStronglyConnectedCutArcs","text":"list containing 1) list cut arc sources, 2) list cut   arc destinations.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/FindStronglyConnectedCutArcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Strongly Connected Cut Arcs — FindStronglyConnectedCutArcs","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad7af5c3a97453e37f251f0e86dbb83db information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetAndCheckTopologicalSort.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is DAG, then Sorts Nodes into Topological Order — GetAndCheckTopologicalSort","title":"Check if Graph is DAG, then Sorts Nodes into Topological Order — GetAndCheckTopologicalSort","text":"Checks directed graph DAG returns topological order.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetAndCheckTopologicalSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is DAG, then Sorts Nodes into Topological Order — GetAndCheckTopologicalSort","text":"","code":"GetAndCheckTopologicalSort(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/GetAndCheckTopologicalSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is DAG, then Sorts Nodes into Topological Order — GetAndCheckTopologicalSort","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetAndCheckTopologicalSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is DAG, then Sorts Nodes into Topological Order — GetAndCheckTopologicalSort","text":"list containing 1) boolean stating graph dag, 2)   vector length numNodes, containing index vertex   ordering location ","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetAndCheckTopologicalSort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is DAG, then Sorts Nodes into Topological Order — GetAndCheckTopologicalSort","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaf10c5e1630e5720c20d83cfb77dbf024 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetBipartitePartitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtains (if possible) Bipartite Split — GetBipartitePartitions","title":"Obtains (if possible) Bipartite Split — GetBipartitePartitions","text":"Checks undirected graph bipartite finds bipartite partitions.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetBipartitePartitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtains (if possible) Bipartite Split — GetBipartitePartitions","text":"","code":"GetBipartitePartitions(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/GetBipartitePartitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtains (if possible) Bipartite Split — GetBipartitePartitions","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetBipartitePartitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtains (if possible) Bipartite Split — GetBipartitePartitions","text":"list containing 1) boolean stating graph bipartite,   2) list length numNodes, containing partition node","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetBipartitePartitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtains (if possible) Bipartite Split — GetBipartitePartitions","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga58ba1d00c569f0eb0deb42afca9f80bb information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetTopologicalSort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorts Nodes into Topological Order — GetTopologicalSort","title":"Sorts Nodes into Topological Order — GetTopologicalSort","text":"Gives back topological order DAG.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetTopologicalSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorts Nodes into Topological Order — GetTopologicalSort","text":"","code":"GetTopologicalSort(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/GetTopologicalSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorts Nodes into Topological Order — GetTopologicalSort","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetTopologicalSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorts Nodes into Topological Order — GetTopologicalSort","text":"list length numNodes, containing index vertex   ordering location .","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GetTopologicalSort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sorts Nodes into Topological Order — GetTopologicalSort","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gafc2cb20cf3859f157c0e12da7f310bb3 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GraphSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Graph Search — GraphSearch","title":"Solver for Graph Search — GraphSearch","text":"Runs common graph search algorithm find minimum cardinality shortest path. Finds shortest path /vertices start/end node given.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GraphSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Graph Search — GraphSearch","text":"","code":"GraphSearch(   arcSources,   arcTargets,   numNodes,   startNode = -1,   endNode = -1,   algorithm = \"Bfs\" )"},{"path":"https://errickson.net/rlemon/dev/reference/GraphSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Graph Search — GraphSearch","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph startNode Optional start node path endNode Optional end node path algorithm Choices algorithm include \"Bfs\" (Breadth First Search) \"Dfs\" (Depth First Search). Bfs default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GraphSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Graph Search — GraphSearch","text":"list containing three entries: 1) predecessor vertex   shortest path, 2) distances node startNode ,   3) list containing node reached ","code":""},{"path":"https://errickson.net/rlemon/dev/reference/GraphSearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Graph Search — GraphSearch","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00608.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsAcyclic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Acyclic. — IsAcyclic","title":"Check if Graph is Acyclic. — IsAcyclic","text":"cycle path starting ending node containing least one node. acyclic graph contains cycles.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsAcyclic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Acyclic. — IsAcyclic","text":"","code":"IsAcyclic(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsAcyclic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Acyclic. — IsAcyclic","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsAcyclic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Acyclic. — IsAcyclic","text":"boolean stating graph acyclic","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsAcyclic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Acyclic. — IsAcyclic","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga14c191b2133a1dd23e1527f074c821c0 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiEdgeConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"Chcek if Graph is Bi-Edge-Connected — IsBiEdgeConnected","title":"Chcek if Graph is Bi-Edge-Connected — IsBiEdgeConnected","text":"Checks undirected graph bi-edge-connected, edges , removed, split graph two unconnected graphs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiEdgeConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chcek if Graph is Bi-Edge-Connected — IsBiEdgeConnected","text":"","code":"IsBiEdgeConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsBiEdgeConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chcek if Graph is Bi-Edge-Connected — IsBiEdgeConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiEdgeConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chcek if Graph is Bi-Edge-Connected — IsBiEdgeConnected","text":"boolean stating graph bi-edge connected","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiEdgeConnected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chcek if Graph is Bi-Edge-Connected — IsBiEdgeConnected","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga37d22a2ddd5a064a9203720f2b93518e information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiNodeConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if Graph is Bi-Node-Connected — IsBiNodeConnected","title":"Checks if Graph is Bi-Node-Connected — IsBiNodeConnected","text":"Checks undirected graph bi-node-connected, nodes , removed, split graph two unconnected graphs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiNodeConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if Graph is Bi-Node-Connected — IsBiNodeConnected","text":"","code":"IsBiNodeConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsBiNodeConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if Graph is Bi-Node-Connected — IsBiNodeConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiNodeConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if Graph is Bi-Node-Connected — IsBiNodeConnected","text":"boolean stating graph bi-node connected","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBiNodeConnected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if Graph is Bi-Node-Connected — IsBiNodeConnected","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gac9257323ead7cbe64b7b4a628c4876b3 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if Graph is Bipartite — IsBipartite","title":"Checks if Graph is Bipartite — IsBipartite","text":"bipartite graph one whose nodes can divided two disjoint independent sets edges connecte two sets within set.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if Graph is Bipartite — IsBipartite","text":"","code":"IsBipartite(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsBipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if Graph is Bipartite — IsBipartite","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if Graph is Bipartite — IsBipartite","text":"boolean stating graph bipartite","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsBipartite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if Graph is Bipartite — IsBipartite","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga577db110d33bd487aaad5bfffb31c6f5 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Connected — IsConnected","title":"Check if Graph is Connected — IsConnected","text":"connected graph path two nodes graph.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Connected — IsConnected","text":"","code":"IsConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Connected — IsConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Connected — IsConnected","text":"boolean stating graph connected","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsConnected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Connected — IsConnected","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad5c8d1b650f6b614a852f8430d90e184 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsDAG.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is a DAG. — IsDAG","title":"Check if Graph is a DAG. — IsDAG","text":"graph DAG Directed Acyclic.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsDAG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is a DAG. — IsDAG","text":"","code":"IsDAG(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsDAG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is a DAG. — IsDAG","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsDAG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is a DAG. — IsDAG","text":"boolean stating graph DAG","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsDAG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is a DAG. — IsDAG","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaef2b43c8cd1d74e15fa5c7607bc5e396 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsEulerian.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Eulerian — IsEulerian","title":"Check if Graph is Eulerian — IsEulerian","text":"directed graph Eulerian connected number incoming outgoing edges node. undirected graph Eulerian connected number incident edges even node.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsEulerian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Eulerian — IsEulerian","text":"","code":"IsEulerian(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsEulerian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Eulerian — IsEulerian","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsEulerian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Eulerian — IsEulerian","text":"TRUE graph Eulerian, FALSE otherwise","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsEulerian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Eulerian — IsEulerian","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gafb5a4961cac4d877006869fc4cb6ea1d information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsLoopFree.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if Graph is Loop Free — IsLoopFree","title":"Checks if Graph is Loop Free — IsLoopFree","text":"loop edge starts ends node passes nodes.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsLoopFree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if Graph is Loop Free — IsLoopFree","text":"","code":"IsLoopFree(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsLoopFree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if Graph is Loop Free — IsLoopFree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsLoopFree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if Graph is Loop Free — IsLoopFree","text":"TRUE graph loop free, FALSE otherwise","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsLoopFree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if Graph is Loop Free — IsLoopFree","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#ga127f3963003cd532c79c226885fe1c8c information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsParallelFree.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Parallel Free — IsParallelFree","title":"Check if Graph is Parallel Free — IsParallelFree","text":"Parallel edges occur two edges single pair nodes.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsParallelFree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Parallel Free — IsParallelFree","text":"","code":"IsParallelFree(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsParallelFree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Parallel Free — IsParallelFree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsParallelFree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Parallel Free — IsParallelFree","text":"TRUE graph parallel free, FALSE otherwise","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsParallelFree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Parallel Free — IsParallelFree","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gaa05e0683f90b69f31eb29fe7d09afde4 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsSimpleGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Simple — IsSimpleGraph","title":"Check if Graph is Simple — IsSimpleGraph","text":"graph simple loop free, parallel free. See also IsLoopFree IsParallelFree.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsSimpleGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Simple — IsSimpleGraph","text":"","code":"IsSimpleGraph(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsSimpleGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Simple — IsSimpleGraph","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsSimpleGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Simple — IsSimpleGraph","text":"TRUE graph simple, FALSE otherwise.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsSimpleGraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Simple — IsSimpleGraph","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gae4c7ae734e2509ab78dc747d602c9236 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsStronglyConnected.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Strongly Connected — IsStronglyConnected","title":"Check if Graph is Strongly Connected — IsStronglyConnected","text":"directed graph strongly connected two nodes connected via paths directions.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsStronglyConnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Strongly Connected — IsStronglyConnected","text":"","code":"IsStronglyConnected(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsStronglyConnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Strongly Connected — IsStronglyConnected","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsStronglyConnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Strongly Connected — IsStronglyConnected","text":"boolean stating graph strongly connected","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsStronglyConnected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Strongly Connected — IsStronglyConnected","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gacd21b34d7b42b9835a204a57fcf15964 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is a Tree — IsTree","title":"Check if Graph is a Tree — IsTree","text":"tree undirected graph two nodes connected exactly one path, equivalently connected acyclic.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is a Tree — IsTree","text":"","code":"IsTree(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/IsTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is a Tree — IsTree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is a Tree — IsTree","text":"boolean stating graph tree","code":""},{"path":"https://errickson.net/rlemon/dev/reference/IsTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is a Tree — IsTree","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00616.html#gad1e4de234e926958647905478415bd54 information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalityMatching.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve for Maximum Cardinality Matching — MaxCardinalityMatching","title":"Solve for Maximum Cardinality Matching — MaxCardinalityMatching","text":"Finds maximum cardinality matching graphs bipartite graphs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalityMatching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve for Maximum Cardinality Matching — MaxCardinalityMatching","text":"","code":"MaxCardinalityMatching(   arcSources,   arcTargets,   numNodes,   algorithm = \"MaxMatching\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalityMatching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve for Maximum Cardinality Matching — MaxCardinalityMatching","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph algorithm Choices algorithm include \"MaxMatching\" \"MaxFractionalMatching\". \"MaxMatching\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalityMatching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve for Maximum Cardinality Matching — MaxCardinalityMatching","text":"list containing two entries: 1) matching value, 2) edges   final graph, List List (node, node) pairs","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalityMatching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solve for Maximum Cardinality Matching — MaxCardinalityMatching","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00615.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalitySearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Max Cardinality Search — MaxCardinalitySearch","title":"Solver for Max Cardinality Search — MaxCardinalitySearch","text":"Runs maximum cardinality search algorithm directed graph. maximum cardinality search first chooses node digraph. every time chooses one unprocessed node maximum cardinality, .e sum capacities arcs nodes previously processed. cut digraph algorithm choose unprocessed node digraph.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalitySearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Max Cardinality Search — MaxCardinalitySearch","text":"","code":"MaxCardinalitySearch(   arcSources,   arcTargets,   arcCapacities,   numNodes,   startNode = -1,   algorithm = \"maxcardinalitysearch\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalitySearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Max Cardinality Search — MaxCardinalitySearch","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcCapacities Vector corresponding distances graph's edges numNodes number nodes graph startNode Optional start node path algorithm Choices algorithm include \"maxcardinalitysearch\". maxcardinalitysearch default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalitySearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Max Cardinality Search — MaxCardinalitySearch","text":"list containing two entries: 1) cardinality node , 2)   list containing node reached ","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxCardinalitySearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Max Cardinality Search — MaxCardinalitySearch","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00255.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxClique.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Largest Complete Subgroup (All Nodes Connected) — MaxClique","title":"Solver for Largest Complete Subgroup (All Nodes Connected) — MaxClique","text":"Finds largest complete subgraph (clique) undirected graph via approximation algorithms maximal clique problem.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxClique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Largest Complete Subgroup (All Nodes Connected) — MaxClique","text":"","code":"MaxClique(   arcSources,   arcTargets,   numNodes,   algorithm = \"GrossoLocatelliPullanMc\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MaxClique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Largest Complete Subgroup (All Nodes Connected) — MaxClique","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph algorithm Choices algorithm include \"GrossoLocatelliPullanMc\". GrossoLocatelliPullanMc default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxClique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Largest Complete Subgroup (All Nodes Connected) — MaxClique","text":"list containing two entries: 1) clique size, 2)   members clique.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxClique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Largest Complete Subgroup (All Nodes Connected) — MaxClique","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00194.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for MaxFlow — MaxFlow","title":"Solver for MaxFlow — MaxFlow","text":"Finds maximum flow directed graph, given source destination node.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for MaxFlow — MaxFlow","text":"","code":"MaxFlow(   arcSources,   arcTargets,   arcCapacities,   sourceNode,   destNode,   numNodes,   algorithm = \"Preflow\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MaxFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for MaxFlow — MaxFlow","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcCapacities Vector corresponding capacities nodes graph's edges sourceNode source node destNode destination node numNodes number nodes graph algorithm Choices algorithm include \"Preflow\" \"EdmondsKarp\". \"Preflow\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for MaxFlow — MaxFlow","text":"list containing three entries: 1) list corresponding   flows arcs graph, 2) list cut-values graph's nodes,   3) total cost flows graph, .e. maxflow value.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxFlow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for MaxFlow — MaxFlow","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00611.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxMatching.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Maximum Weighted Matching — MaxMatching","title":"Solver for Maximum Weighted Matching — MaxMatching","text":"Finds maximum weighted matching graphs bipartite graphs. algorithm set returns different outputs depending different situations, like PerfectMatching PerfectFractionalMathing.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxMatching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Maximum Weighted Matching — MaxMatching","text":"","code":"MaxMatching(   arcSources,   arcTargets,   arcWeights = NULL,   numNodes,   algorithm = \"MaxWeightedMatching\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MaxMatching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Maximum Weighted Matching — MaxMatching","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's edges numNodes number nodes graph algorithm Choices algorithm include \"MaxWeightedMatching\", \"MaxWeightedPerfectMatching\", \"MaxWeightedFractionalMatching\", \"MaxWeightedPerfectFractionalMatching\". \"MaxWeightedMatching\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxMatching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Maximum Weighted Matching — MaxMatching","text":"list containing two entries: 1) matching value, 2) edges   final graph, List List (node, node) pairs","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MaxMatching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Maximum Weighted Matching — MaxMatching","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00615.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostArborescence.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Minimum Cost Arborescence — MinCostArborescence","title":"Solver for Minimum Cost Arborescence — MinCostArborescence","text":"Finds minimum cost arborescence graph, returning cost pairs nodes edges arborescence.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostArborescence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Minimum Cost Arborescence — MinCostArborescence","text":"","code":"MinCostArborescence(   arcSources,   arcTargets,   arcDistances,   sourceNode,   numNodes,   algorithm = \"MinCostArborescence\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MinCostArborescence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Minimum Cost Arborescence — MinCostArborescence","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances nodes graph's edges sourceNode source node numNodes number nodes graph algorithm Choices algorithm include \"MinCostArborescence\". \"MinCostArborescence\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostArborescence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Minimum Cost Arborescence — MinCostArborescence","text":"list containing three entries: 1) Two vectors corresponding   source target nodes edges tree, 2) total cost   arborescence.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostArborescence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Minimum Cost Arborescence — MinCostArborescence","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00264.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for MinCostFlow — MinCostFlow","title":"Solver for MinCostFlow — MinCostFlow","text":"Finds minimum cost flow directed graph.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostFlow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for MinCostFlow — MinCostFlow","text":"","code":"MinCostFlow(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes,   algorithm = \"NetworkSimplex\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MinCostFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for MinCostFlow — MinCostFlow","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcCapacities Vector corresponding capacities nodes graph's edges arcCosts Vector corresponding capacities nodes graph's edges nodeSupplies Vector corresponding supplies node numNodes number nodes graph algorithm Choices algorithm include \"NetworkSimplex\", \"CostScaling\", \"CapacityScaling\", \"CycleCancelling\". NetworkSimplex default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostFlow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for MinCostFlow — MinCostFlow","text":"list containing three entries: 1) list corresponding   flows arcs graph, 2) list potentials graph's nodes,   3) total cost flows graph, .e. mincostflow value,   4) LEMON's feasibility type, demonstrating feasible graph   problem , one \"INFEASIBLE\", \"OPTIMAL\", \"UNBOUNDED\"","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCostFlow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for MinCostFlow — MinCostFlow","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00612.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCut.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for MinCut — MinCut","title":"Solver for MinCut — MinCut","text":"Finds minimum cut graphs. NagamochiIbaraki calculates min cut value edges undirected graphs,HaoOrlin calculates min cut value edges directed graphs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for MinCut — MinCut","text":"","code":"MinCut(   arcSources,   arcTargets,   arcWeights,   numNodes,   algorithm = \"NagamochiIbaraki\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MinCut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for MinCut — MinCut","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcWeights Vector corresponding weights graph's arcs numNodes number nodes graph algorithm Choices algorithm include \"NagamochiIbaraki\" \"HaoOrlin\". \"NagamochiIbaraki\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for MinCut — MinCut","text":"list containing three entries: 1) value minimum cut   graph, 2) list nodes first partition, 3) list   nodes second partition. GomoryHu calculates Gomory-Hu Tree   returns list containing three entries: 1) list predecessor nodes   node graph, 2) list weights predecessor edge   node, 3) list distances root node node.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinCut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for MinCut — MinCut","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00613.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinMeanCycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Minimum Mean Cycle — MinMeanCycle","title":"Solver for Minimum Mean Cycle — MinMeanCycle","text":"Finds Minimum Mean Cycle directed graphs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinMeanCycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Minimum Mean Cycle — MinMeanCycle","text":"","code":"MinMeanCycle(   arcSources,   arcTargets,   arcDistances,   numNodes,   algorithm = \"Howard\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MinMeanCycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Minimum Mean Cycle — MinMeanCycle","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph algorithm Choices algorithm include \"Howard\", \"Karp\", \"HartmannOrlin\". \"Howard\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinMeanCycle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Minimum Mean Cycle — MinMeanCycle","text":"list containing two entries: 1) vector containing costs   edge MMC, 2) nodes MMC.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinMeanCycle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Minimum Mean Cycle — MinMeanCycle","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00614.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinSpanningTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Minimum Spanning Tree — MinSpanningTree","title":"Solver for Minimum Spanning Tree — MinSpanningTree","text":"Finds minimum spanning tree graph. minimum spanning tree minimal connected acyclic subgraph graph, assuming graph undirected.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinSpanningTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Minimum Spanning Tree — MinSpanningTree","text":"","code":"MinSpanningTree(   arcSources,   arcTargets,   arcDistances,   numNodes,   algorithm = \"Kruskal\" )"},{"path":"https://errickson.net/rlemon/dev/reference/MinSpanningTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Minimum Spanning Tree — MinSpanningTree","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances nodes graph's edges numNodes number nodes graph algorithm Choices algorithm include \"Kruskal\". \"Kruskal\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinSpanningTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Minimum Spanning Tree — MinSpanningTree","text":"list containing three entries: 1) Two vectors corresponding   source target nodes edges tree, 2) total minimum   spanning tree value.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/MinSpanningTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Minimum Spanning Tree — MinSpanningTree","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00610.html#ga233792b2c44a3581b85a775703e045af","code":""},{"path":"https://errickson.net/rlemon/dev/reference/NetworkCirculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Network Circulation — NetworkCirculation","title":"Solver for Network Circulation — NetworkCirculation","text":"Finds solution network circulation problem via push-relabel circulation algorithm.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/NetworkCirculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Network Circulation — NetworkCirculation","text":"","code":"NetworkCirculation(   arcSources,   arcTargets,   arcLowerBound,   arcUpperBound,   nodeSupplies,   numNodes,   algorithm = \"Circulation\" )"},{"path":"https://errickson.net/rlemon/dev/reference/NetworkCirculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Network Circulation — NetworkCirculation","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcLowerBound Vector corresponding lower-bound capacities nodes graph's edges arcUpperBound Vector corresponding upper-bound capacities nodes graph's edges nodeSupplies Vector corresponding supplies node graph. numNodes number nodes graph algorithm Choices algorithminclude \"Circulation\". \"Circulation\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/NetworkCirculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Network Circulation — NetworkCirculation","text":"list containing two entries: 1) list corresponding flows   arcs graph, 2) list graph's barrier nodes.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/NetworkCirculation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Network Circulation — NetworkCirculation","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00078.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarChecking.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Graph is Planar — PlanarChecking","title":"Check if Graph is Planar — PlanarChecking","text":"Checks undirected graph planar.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarChecking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Graph is Planar — PlanarChecking","text":"","code":"PlanarChecking(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/PlanarChecking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Graph is Planar — PlanarChecking","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarChecking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Graph is Planar — PlanarChecking","text":"boolean stating graph planar .","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarChecking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Graph is Planar — PlanarChecking","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00617.html#ga230242aa2ee36f9b1b5a58f2c53016eb information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarColoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Planar Coloring — PlanarColoring","title":"Solver for Planar Coloring — PlanarColoring","text":"Checks graph planar returns coloring graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarColoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Planar Coloring — PlanarColoring","text":"","code":"PlanarColoring(arcSources, arcTargets, numNodes, algorithm = \"fiveColoring\")"},{"path":"https://errickson.net/rlemon/dev/reference/PlanarColoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Planar Coloring — PlanarColoring","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph algorithm, algorithm use. \"sixColoring\" generates 6-coloring graph, \"fiveColoring\" generates 5-coloring.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarColoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Planar Coloring — PlanarColoring","text":"list containing 1) boolean graph planar, 2) color   vertex graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarColoring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Planar Coloring — PlanarColoring","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00306.html information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarDrawing.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Planar Drawing — PlanarDrawing","title":"Solver for Planar Drawing — PlanarDrawing","text":"planar drawing algorithm calculates positions nodes plane. coordinates satisfy edges represented straight lines, intersect .","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarDrawing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Planar Drawing — PlanarDrawing","text":"","code":"PlanarDrawing(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/PlanarDrawing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Planar Drawing — PlanarDrawing","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarDrawing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Planar Drawing — PlanarDrawing","text":"list 1) boolean graph planar, 2)   x-coordinate planar embedding, 3) y-coordinate planar   embedding","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarDrawing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Planar Drawing — PlanarDrawing","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00307.html information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarEmbedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Planar Embedding — PlanarEmbedding","title":"Solver for Planar Embedding — PlanarEmbedding","text":"Checks undirected graph planar returns list outputs related planar embedding","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarEmbedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Planar Embedding — PlanarEmbedding","text":"","code":"PlanarEmbedding(arcSources, arcTargets, numNodes)"},{"path":"https://errickson.net/rlemon/dev/reference/PlanarEmbedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Planar Embedding — PlanarEmbedding","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges numNodes number nodes graph","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarEmbedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Planar Embedding — PlanarEmbedding","text":"list containing 1) boolean graph planar, 2) start   nodes arcs embedding, 3) end nodes arcs   planar embedding, 4) start nodes edges kuratowski   subdivision, 5) end nodes edges kuratowski subdivision.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/PlanarEmbedding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Planar Embedding — PlanarEmbedding","text":"See https://lemon.cs.elte.hu/pub/doc/1.3.1/a00308.html information.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPath.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Shortest Path Between Two Nodes — ShortestPath","title":"Solver for Shortest Path Between Two Nodes — ShortestPath","text":"Finds shortest arc disjoint paths two nodes directed graph. implementation runs variation successive shortest path algorithm.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Shortest Path Between Two Nodes — ShortestPath","text":"","code":"ShortestPath(   arcSources,   arcTargets,   arcDistances,   numNodes,   sourceNode,   destNode,   algorithm = \"Suurballe\" )"},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Shortest Path Between Two Nodes — ShortestPath","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph sourceNode start node path destNode end node path algorithm Choices algorithm include \"Suurballe\". \"Suurballe\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Shortest Path Between Two Nodes — ShortestPath","text":"list containing two entries: 1) number paths start   node end node 2) list paths found.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Shortest Path Between Two Nodes — ShortestPath","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00609.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPathFromSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve for Shortest Path from Source Node to All Other Nodes — ShortestPathFromSource","title":"Solve for Shortest Path from Source Node to All Other Nodes — ShortestPathFromSource","text":"Finds shortest path source node rest nodes directed graph. shortest path algorithms consider distances present graph, well number edges.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPathFromSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve for Shortest Path from Source Node to All Other Nodes — ShortestPathFromSource","text":"","code":"ShortestPathFromSource(   arcSources,   arcTargets,   arcDistances,   numNodes,   sourceNode,   algorithm = \"Dijkstra\" )"},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPathFromSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve for Shortest Path from Source Node to All Other Nodes — ShortestPathFromSource","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph sourceNode source node algorithm Choices algorithm include \"Dijkstra\" \"BellmanFord\". \"Dijkstra\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPathFromSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve for Shortest Path from Source Node to All Other Nodes — ShortestPathFromSource","text":"list containing two entries: 1) distances node   startNode 2) predecessor vertex shortest path.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/ShortestPathFromSource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solve for Shortest Path from Source Node to All Other Nodes — ShortestPathFromSource","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00609.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/TravelingSalesperson.html","id":null,"dir":"Reference","previous_headings":"","what":"Solver for Traveling Salesperson Problem — TravelingSalesperson","title":"Solver for Traveling Salesperson Problem — TravelingSalesperson","text":"Finds approximations travelling salesperson problem using approximation algorithms graphs. NOTE: LEMON's TSP uses complete graph backend, expect less performance sparse graphs.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/TravelingSalesperson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solver for Traveling Salesperson Problem — TravelingSalesperson","text":"","code":"TravelingSalesperson(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999,   algorithm = \"Christofides\" )  TravellingSalesperson(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999,   algorithm = \"Christofides\" )"},{"path":"https://errickson.net/rlemon/dev/reference/TravelingSalesperson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solver for Traveling Salesperson Problem — TravelingSalesperson","text":"arcSources Vector corresponding source nodes graph's edges arcTargets Vector corresponding destination nodes graph's edges arcDistances Vector corresponding distances graph's edges numNodes number nodes graph defaultEdgeWeight default edge weight edge -specified (default value 999999) algorithm Choices algorithm include \"Christofides\", \"Greedy\", \"Insertion\", \"NearestNeighbor\", \"Opt2\". \"Christofides\" default.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/TravelingSalesperson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solver for Traveling Salesperson Problem — TravelingSalesperson","text":"List 1) list tour vertices, 2) total tour cost","code":""},{"path":"https://errickson.net/rlemon/dev/reference/TravelingSalesperson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solver for Traveling Salesperson Problem — TravelingSalesperson","text":"details LEMON's implementation, including differences algorithms, see https://lemon.cs.elte.hu/pub/doc/1.3.1/a00618.html.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/lemon-runners.html","id":null,"dir":"Reference","previous_headings":"","what":"LEMON runners — GrossoLocatelliPullanMcRunner","title":"LEMON runners — GrossoLocatelliPullanMcRunner","text":"\"runner\" functions provide slightly lower-level access LEMON.","code":""},{"path":"https://errickson.net/rlemon/dev/reference/lemon-runners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LEMON runners — GrossoLocatelliPullanMcRunner","text":"","code":"GrossoLocatelliPullanMcRunner(arcSources, arcTargets, numNodes)  getBipartitePartitionsRunner(arcSources, arcTargets, numNodes)  getAndCheckTopologicalSortRunner(arcSources, arcTargets, numNodes)  getTopologicalSortRunner(arcSources, arcTargets, numNodes)  IsConnectedRunner(arcSources, arcTargets, numNodes)  IsAcyclicRunner(arcSources, arcTargets, numNodes)  IsTreeRunner(arcSources, arcTargets, numNodes)  IsBipartiteRunner(arcSources, arcTargets, numNodes)  IsStronglyConnectedRunner(arcSources, arcTargets, numNodes)  IsDAGRunner(arcSources, arcTargets, numNodes)  IsBiNodeConnectedRunner(arcSources, arcTargets, numNodes)  IsBiEdgeConnectedRunner(arcSources, arcTargets, numNodes)  IsLoopFreeRunner(arcSources, arcTargets, numNodes)  IsParallelFreeRunner(arcSources, arcTargets, numNodes)  IsSimpleGraphRunner(arcSources, arcTargets, numNodes)  IsEulerianRunner(arcSources, arcTargets, numNodes)  CountBiEdgeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  CountConnectedComponentsRunner(arcSources, arcTargets, numNodes)  CountBiNodeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  CountStronglyConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindStronglyConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindStronglyConnectedCutArcsRunner(arcSources, arcTargets, numNodes)  FindBiEdgeConnectedCutEdgesRunner(arcSources, arcTargets, numNodes)  FindBiNodeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindBiNodeConnectedCutNodesRunner(arcSources, arcTargets, numNodes)  FindConnectedComponentsRunner(arcSources, arcTargets, numNodes)  FindBiEdgeConnectedComponentsRunner(arcSources, arcTargets, numNodes)  GraphCompatabilityConverter(nodesList, arcSources, arcTargets)  BfsRunner(arcSources, arcTargets, numNodes, startNode = -1L, endNode = -1L)  DfsRunner(arcSources, arcTargets, numNodes, startNode = -1L, endNode = -1L)  MaxCardinalitySearchRunner(   arcSources,   arcTargets,   arcCapacities,   numNodes,   startNode = -1L )  CirculationRunner(   arcSources,   arcTargets,   arcLowerBound,   arcUpperBound,   nodeSupplies,   numNodes )  PreflowRunner(   arcSources,   arcTargets,   arcDistances,   sourceNode,   destinationNode,   numNodes )  EdmondsKarpRunner(   arcSources,   arcTargets,   arcDistances,   sourceNode,   destinationNode,   numNodes )  MaximumWeightPerfectMatchingRunner(   arcSources,   arcTargets,   arcWeights,   numNodes )  MaximumWeightFractionalPerfectMatchingRunner(   arcSources,   arcTargets,   arcWeights,   numNodes )  MaximumWeightFractionalMatchingRunner(   arcSources,   arcTargets,   arcWeights,   numNodes )  MaximumWeightMatchingRunner(arcSources, arcTargets, arcWeights, numNodes)  MaximumCardinalityMatchingRunner(arcSources, arcTargets, numNodes)  MaximumCardinalityFractionalMatchingRunner(arcSources, arcTargets, numNodes)  CycleCancellingRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  CapacityScalingRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  CostScalingRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  NetworkSimplexRunner(   arcSources,   arcTargets,   arcCapacities,   arcCosts,   nodeSupplies,   numNodes )  NagamochiIbarakiRunner(arcSources, arcTargets, arcWeights, numNodes)  HaoOrlinRunner(arcSources, arcTargets, arcWeights, numNodes)  GomoryHuTreeRunner(arcSources, arcTargets, arcWeights, numNodes)  HowardMmcRunner(arcSources, arcTargets, arcDistances, numNodes)  KarpMmcRunner(arcSources, arcTargets, arcDistances, numNodes)  HartmannOrlinMmcRunner(arcSources, arcTargets, arcDistances, numNodes)  KruskalRunner(arcSources, arcTargets, arcDistances, numNodes)  MinCostArborescenceRunner(   arcSources,   arcTargets,   arcDistances,   sourceNode,   numNodes )  PlanarCheckingRunner(arcSources, arcTargets, numNodes)  PlanarEmbeddingRunner(arcSources, arcTargets, numNodes)  PlanarColoringRunner(arcSources, arcTargets, numNodes, useFiveAlg = TRUE)  PlanarDrawingRunner(arcSources, arcTargets, numNodes)  SuurballeRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   startNode,   endNode )  DijkstraRunner(arcSources, arcTargets, arcDistances, numNodes, startNode)  BellmanFordRunner(arcSources, arcTargets, arcDistances, numNodes, startNode)  ChristofidesRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  GreedyTSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  InsertionTSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  NearestNeighborTSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  Opt2TSPRunner(   arcSources,   arcTargets,   arcDistances,   numNodes,   defaultEdgeWeight = 999999L )  lemon_runners()"},{"path":"https://errickson.net/rlemon/dev/reference/lemon-runners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LEMON runners — GrossoLocatelliPullanMcRunner","text":"arcSources vector corresponding source nodes graph’s edges arcTargets vector corresponding destination nodes graph’s edges numNodes number nodes graph nodesList vector nodes graph startNode path-based algorithms, start node path endNode path-based algorithms, end node path arcCapacities vector corresponding capacities nodes graph’s edges arcLowerBound vector corresponding lower-bound capacities nodes graph’s edges arcUpperBound vector corresponding upper-bound capacities nodes graph’s edges nodeSupplies vector corresponding supplies node graph arcDistances vector corresponding distances graph’s edges sourceNode flow-based algorithms, source node flow destinationNode flow-based algorithms, destination node flow arcWeights vector corresponding weights graph’s arcs arcCosts vector corresponding costs nodes graph’s edges useFiveAlg boolean asks want 5-color graph. false, runs faster 6-coloring algorithm instead. defaultEdgeWeight default edge weight edge -specified (default value 999999)","code":""},{"path":"https://errickson.net/rlemon/dev/reference/lemon-runners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LEMON runners — GrossoLocatelliPullanMcRunner","text":"Algorithm results","code":""},{"path":"https://errickson.net/rlemon/dev/reference/lemon-runners.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LEMON runners — GrossoLocatelliPullanMcRunner","text":"Internally, exported rlemon functions call \"runner\" function interface C++, example, MaxFlow(..., algorithm = \"PreFlow\") call PreFlowRunner(...). almost cases, users want stick exported functions. current scenario user might want use runners bypass rlemon's input checks. particular case, user can access appropriate runner triple-colon notation, e.g. MaxFlow example, use rlemon:::PreFlowRunner(...).##'","code":""},{"path":"https://errickson.net/rlemon/dev/reference/small_graph_example.html","id":null,"dir":"Reference","previous_headings":"","what":"A small network graph example — small_graph_example","title":"A small network graph example — small_graph_example","text":"small network graph example","code":""},{"path":"https://errickson.net/rlemon/dev/reference/small_graph_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A small network graph example — small_graph_example","text":"","code":"small_graph_example"},{"path":"https://errickson.net/rlemon/dev/reference/small_graph_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A small network graph example — small_graph_example","text":"list length 5.","code":""},{"path":"https://errickson.net/rlemon/dev/news/index.html","id":"rlemon-020","dir":"Changelog","previous_headings":"","what":"rlemon 0.2.0","title":"rlemon 0.2.0","text":"min cost flow algorithms now return feasibility status (#25) Ensure algorithm= arguments default (#29) Intelligent error algorithm= argument isn’t string (#32) Various fixed, orgaization, cleanups documentation (#34, #30, #27, #28, others)","code":""},{"path":"https://errickson.net/rlemon/dev/news/index.html","id":"rlemon-010","dir":"Changelog","previous_headings":"","what":"rlemon 0.1.0","title":"rlemon 0.1.0","text":"CRAN release: 2022-03-11 First release!","code":""}]
